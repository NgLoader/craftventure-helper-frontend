{"version":3,"mappingsgCAJA;AAKAC,kCALA;AAMAC,sCANA;AAOAC;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACAC;AACAA;AACAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA,WAHA,CAIA;;AACA;AACA;AACA,SAPA,CAQA;AACA;;;AACA;AACA;AACA;AACA,oEACAC,+CADA;AAEA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA,yDADA,CAEA;AACA;AACA;AACA;;AACA;AACAC,6BADA;AAEAC,iCAFA;AAGAC,mCAHA;AAIAC,+BAJA;AAKAC,iCALA;AAMAC;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,YAAYL,GAAZ,GAAuCM,UAAvC,CAAYN,GAAZ;AAAA,YAAYE,MAAZ,GAAuCI,UAAvC,CAAYJ,MAAZ;AAAA,YAAYC,IAAZ,GAAuCG,UAAvC,CAAYH,IAAZ;AAAA,YAAYF,KAAZ,GAAuCK,UAAvC,CAAYL,KAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACAK;AACAA;AACAA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,YAAYN,GAAZ,GAAsDO,IAAtD,CAAYP,GAAZ;AAAA,YAAYC,KAAZ,GAAsDM,IAAtD,CAAYN,KAAZ;AAAA,YAAYC,MAAZ,GAAsDK,IAAtD,CAAYL,MAAZ;AAAA,YAAYC,IAAZ,GAAsDI,IAAtD,CAAYJ,IAAZ;AAAA,YAAYC,KAAZ,GAAsDG,IAAtD,CAAYH,KAAZ;AAAA,YAAYC,MAAZ,GAAsDE,IAAtD,CAAYF,MAAZ;AACA;AACA;AACA,gFACAG,4BADA,IACAA,6BADA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;UACAC;AACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACAC;AADA;AAGAC;AACA;AACAD;AAAkCV,wCAAlC;AAAkCG;AAAlC,iBADA;AAEAG;AAFA;AAIS,aALT;AAMA;AACA;;;;iBACA;AACA;AACA;;AACA;AACA;AACA,aALA,CAMA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACAM;AACAC;AACA,aAJA,MAKA;AACAD;AACAC;AACA;;AACA;AACA,+DAvBA,CAwBA;AACA;;AACA;AACA;AACAC;AACA;AACS,aAJT;AAKAJ;AACAA;AACA;AAAiBV,gCAAjB;AAAiBG;AAAjB;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA;AACA;AACA,mDAHA,CAIA;;AACAY;;AACA,wBAAoBC,4BAApB,EAAkDA,GAAlD,EAAkD;AAClDC;AACA;;AACA;AACAC;AACA,SAFA,MAGA;AACAC;AACA;;AACAC;AACAA;AACA;AACA;AACA;;;AACA;AACA;;AACA;AACA;;AACA,0BAAwBJ,6BAAxB,EAAuDA,GAAvD,EAAuD;AACvDK;AACA;AACA;AACA,QACA;;;AACA;AACA;;AACA;AACA;AACA;AACAN;AACA,SAJA,CAKA;AACA;AACA;;;AACA;AACAA,2CAAkCA,UAAlC,cAAgDO,eAAhD;AACA;AACA;AACA;;;AACA;AACA;;AACA;AACA;AACA;AACA;AACAC;AACA,WAFA,CAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,wCAAoC,wFAA+B;AAAGC;AAAH,OAA/B,CAApC;AACA;;AACA,uCAAmC,wFAA+B;AAAGA;AAAH,OAA/B,CAAnC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;UACAC;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAmCC,gBAAnC;AAAmCC;AAAnC;AACA;;AACA;AAAkCD,gBAAlC;AAAkCC;AAAlC;AACA;;AACA,iCAA+BC,yCAA/B;AACA;;AACA,0CAAwCC,oDAAxC;AACA;;AACA,wCAAsCA,oDAAtC;AACA;;AACA,qCAAmCA,oDAAnC;AACA;;AACA,qCAAmCA,oDAAnC;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,mCAAiCD,yCAAjC;AACA;;AACA,6BAA2BA,yCAA3B;AACA;;AACA,8BAA4BA,yCAA5B;AACA;;AACA,2BAAyBA,yCAAzB;AACA;;AACA,6BAA2BA,yCAA3B;AACA;;AACA,4BAA0BA,yCAA1B;AACA;;AACA,6BAA2BA,yCAA3B;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA,wCADA,CAEA;;;AACA;AACA;AACA;AACA;AACiB,eAHjB;;AAIA;AACA;AACA;AACA,aARA,MASA;AACA;AACA;AACA,WAfA;AAgBA;;;AACA;AACA;;AACA;AACA;AACA;AACA,+FAHA,CAIA;AACA;AACA;AACA;;AACA;AACA;;AACA;;AACA;AACA;;AACA;AACA,iBANA,CAOA;AACA;AACA;;;AACA;AACA;AACA;AACAE;AACA;;AACA;AAAA;AAAA;AACA;AACA;;AACA;AACA,aA7BA,CA8BA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aArCA,CAsCA;AACA;AACA;;;AACAA;;AACA;;AACA;AACA;;AACA;;AACA;AACA;AACA,aAFA,MAGA;AACA;AACAC,kCACAC,0FADA;AAEAD,kCACAC,0FADA;;AAEA,sFANA,CAOA;;;AACA;AACA,2DAA0DD,iBAA1D,cAA+EA,iBAA/E;;AACA;AACA;AACA,aA7DA,CA8DA;AACA;AACA;;;AACA;AACA;AACA;AACAE,gCADA;AAEAC,6DAFA;AAGAJ,8BAHA;AAIAK,+EAJA;AAKAC;AALA;AAOiB,eARjB;AASA;AACA,WA5EA;AA6EA;;;AACA;AACA;AACA,WAFA;;AAGA;AACA;;AACAC;AACA;AACA;;;;;eACA;AACA;AACA;eACA;AACA,2BAAyB,8EAAqBC,KAArB,CAAzB;;AACA;AACA;;AACA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AAAA,qBAA8C,sEAAaC,MAAb,CAA9C;AAAA;;AACA;AAAA;AAAA;;AACA,iDAHA,CAIA;AACA;AACA;AACA;;;AACA;;AACA;AACA;AACAC;AACA;AACS,aAJT;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,0BAAwB,sEAAaC,WAAb,CAAxB;;AACA;AACA;AACA;AACA;;AACA;AACAC;AACAA;AACa,eAHb;;AAIA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,sDAAkD,sEAAaC,eAAb,CAAlD,GAA+D,IAA/D;;AACA;;AACA;AACA,6DACAC,MADA,CACA,EADA,EAEAC,SAFA,CAEA;AAAA;AAAA,eAFA;AAGA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,gEADA,CAEA;AACA;;;AACA;AACA;AACA;AACAC;AACA;;AACAA;;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,4GACA,iEADA;AAEA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AAAkCpB,kBAAlC;AAAkCC;AAAlC;AACA;AAAmCD,kBAAnC;AAAmCC;AAAnC;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACAoB;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACAA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AAAiBrB,2BAAjB;AAAiBC;AAAjB;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAkCD,kBAAlC;AAAkCC;AAAlC;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACAmB;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACAA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AAA6Bb;AAA7B;;AACA;AACA;AACA;;AACA;AACA;;AACA;;AACA;AACa,eAJb;AAKA,aARA,MASA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;AACA;AACAA,gCADA;AAEAE,oEAFA;AAGAa;AAHA;AAKa,eANb;;AAOA;;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;AACA;AACA;;AACA;;AACA,2FAJA,CAKA;;;AACA,qDANA,CAOA;;;AACAC,mDARA,CASA;AACA;;AACA,qEAXA,CAYA;AACA;;AACA,2DAdA,CAeA;AACA;AACA;;AACAC;;AACA;;AACA;;AACA;AAAgCjB;AAAhC,iBArBA,CAqBiD;;AACjDkB;AACA;AACA;AACA,aAzBA,MA0BA;AACA;AAAgClB;AAAhC;AACA;AACA,aAnCA,CAoCA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACAH;AACA;;AACA;AACA;AACA;AACA;AACA,mFACA,+DADA,CAVA,CAYA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAA;AACA,aApBA,CAqBA;;;AACA;AACA;AACA,aAxBA,CAyBA;AACA;AACA;;;AACA;AACA;AACAW;AACA;;AACA,8DAhCA,CAiCA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACS,aAFT;;AAGA;AACA;AACA,aA3CA,CA4CA;AACA;AACA;;;AACA;AACA,2FACA,0BADA,GACA;AAA2Cf,kBAA3C;AAA2CC;AAA3C,aADA,GAEA,0DAFA;;AAGA,gGACA,qCADA;;AAEA;AAAwCD,kBAAxC;AAAwCC;AAAxC;AACA;AAAuDD,kCAAvD;AAAuDC;AAAvD;AACA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;AACAuB;;AACA;;AACA;;AACA;;AACA,wFATA,CAUA;;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AAA8BjB,8BAA9B;AAA8BE,kCAA9B;AAA8Ba;AAA9B;;AACA;AACAI,4BADA;AAEAC,0CAFA;AAGAC,mDAHA;AAIAC,oCAJA;AAKAC,2DALA;AAMAC,8DANA;AAOAtB,kCAPA;AAQAa;AARA;;AAUAO;AACA;AACS,aAnBT;AAoBA;AACA;AACA;AACA;AACA;;;;iBACA,iDAA6D;AAAA;;AAAA,gBAA5B7B,CAA4B,QAA5BA,CAA4B;AAAA,gBAA5BC,CAA4B,QAA5BA,CAA4B;AAAA,gBAAlB+B,IAAkB,SAAlBhC,CAAkB;AAAA,gBAAlBiC,IAAkB,SAAlBhC,CAAkB;;AAC7D;AACA,mGAF6D,CAG7D;AACA;AACA;AACA;;;AACA,mFACA,6CADA,EACA;AACAiC;AACA;;AACA;AACA;AACA;AACA;AAAmCR,8BAAnC;AAAmCG;AAAnC;;AACA,mDAHA,CAIA;;;AACA;;AACA,uGACA;AACA;AACAK,4CAHA,GAGA,oBAHA,GAGAC,SAHA;;AAIA;AACAT,8BADA;AAEAG,yCAFA;AAGAF;AAHA;AAKa,eAfb;AAgBA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACAS;AACAC;AACA;;AACA;AACAC;AACA,eAFA,MAGA;AACAD,0CACAE,wEADA;AAEA;AACA,aAfA,MAgBA;AACA;AACAF;AACAC;;AACA;AACAD;AACA;AACA;;AACAzE;AACA;AACA;AACA4E,mCAHA;AAIA;AACAC,yBALA;AAMAC,+BANA;AAOApE,sBAPA;AAQAG,uBARA;AASAkE,gCAAuB,2BAAvB;AATA;AAWAtB;AACAgB;AACAA;;AACA;AACA;AACAO;AAAA;AAAA;AACA,eAFA,MAGA;AACAP;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;;AACA,4EALA,CAMA;;;AACA,8DAPA,CAQA;;;AACA,mFATA,CAUA;AACA;AACA;AACA;;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACAQ;AACAC;AACA;AACiB,iBANjB,CADA,CAQA;AACA;AACA;;;AACA;;AACA;AACa,eAbb;AAcS,aAfT;AAgBA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;;AACA;;AACAC;AACA,aAJA,MAKA;AACAA;AACA;;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA/C,0DADA;AAEAC;AAFA;AAIA;AACA;;;;iBACA;AACA;;AACA,8CAQAG;AAA8D4C,sBAA9D;AAA8DC;AAA9D,aARA,GAQkF7C,KARlF;AASA;AACA,qDAZA,CAaA;AACA;;AACA;AACA;;AACA;AACA;;AACA8C;AACAA;AACA;AACA;AACA;;AACA;AAAiBlD,kBAAjB;AAAiBC;AAAjB;AACA;AACA;;;;iBACA;AACA;;AACA,wBAAqB,oEAArB;AAAA,gBAAcD,CAAd,SAAcA,CAAd;AAAA,gBAAcC,CAAd,SAAcA,CAAd;;AACA;AACAA;AACA,aAFA,MAGA;AACAD;AACA;;AACA;AACA,0CAA6C,6BAA7C;AAAA,kBAAoBmD,OAApB,yBAAoBnD,CAApB;AAAA,kBAAoBoD,OAApB,yBAAoBnD,CAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACAD;AACAC;AACA;;AACA;AAAiBD,kBAAjB;AAAiBC;AAAjB;AACA;AACA;;;;iBACA;AACA,gBAAgBD,CAAhB,GAAuBqD,qBAAvB,CAAgBrD,CAAhB;AAAA,gBAAgBC,CAAhB,GAAuBoD,qBAAvB,CAAgBpD,CAAhB;AACA;AACA,qFAHA,CAIA;;AACA;AACA,kEANA,CAOA;AACA;AACA;AACA;;AACA;AACAS;AACA4C;AACA;;AACA;AACA5C;AACA4C;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACAjC;AACA;AACA;AACA;;;;iBACA;AACAL;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,+CADA,CAEA;AACA;;AACA;AACA;AACA,aANA,CAOA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,mBADA,CAEA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AAAqBhB,uDAArB;AAAqBC;AAArB;AACA;;AACA;AAAiBD,kBAAjB;AAAiBC;AAAjB;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,wCAAqB,sBAArB;AAAA,gBAAcD,CAAd,yBAAcA,CAAd;AAAA,gBAAcC,CAAd,yBAAcA,CAAd;;AACA;AACA;AACA;;AACA;;AACA,wEANA,CAOA;AACA;;;AACA,yEACAsD,mDADA,EACA;AACA;AACA;;AACA;AACA;AACA;AACA,0EAhBA,CAiBA;AACA;;AACA;AACA;AACAvD;AACA;;AACA;AACAA;AACA;AACA,aAPA,MAQA;AACAA;AACA,aA7BA,CA8BA;AACA;;;AACA;AACA;AACAC;AACA;;AACA;AACAA;AACA;AACA,aAPA,MAQA;AACAA;AACA;;AACA;AACA;AAAuCA,oBAAvC;AAAuCD;AAAvC;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA,aAFA,MAGA;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA,wCADA,CAEA;AACA;AACA;;AACA,sEACAwD,0EADA,GACA;AACApE;AACA;;AACA;AACA,mEAVA,CAWA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA,oEACA,+CADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,uCAAqC,uEAAc,iBAAd,CAArC;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;AACA;AACA,+CADA,CAEA;AACA;AACA;;AACA,mCACAqE,6BADA,IAEAA,mCAFA,IAGAA,gCAHA,IAIAA,+BAJA,IAKAA,gBALA;AAMA;;AACA,mBAAe,sEAAaC,gBAAb,CAAf;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA,qCAA0BC,aAA1B,iBAA8CA,aAA9C;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACAC;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACA;AACA;AACA;;AACA;;AACAC;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACAL,uCAA4BM,gBAA5B;AACAN,wCAA6BM,iBAA7B;AACAN;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AACA,2BAAuBlE,QAAvB,EAAiCA,UAAjC,EAAiC;AACjCyE;AACA;;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AACA;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACA;AACAA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;UACAC;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AACA;;;AACA;AAAA;AAAA;AACA;;;AACA,mCAAiC/D,yCAAjC;AACA;AACA;AACA;;AACA,6BAA2BA,yCAA3B;AACA;AACA;AACA;AACA;;AACA,4BAA0BA,yCAA1B;AACA;;AACA,6BAA2BA,yCAA3B;AACA;;AACA,4BAA0BA,yCAA1B;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAA+BgE,sBAA/B;AAA+BxD,oBAA/B;AAA+ByD;AAA/B;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA,6CAA2ChE,oDAA3C;AACA;;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;;AACA,uCAAqCD,yCAArC;AACA;;AACA;AACA;;AACA;AACA;;AACY,4DAAQ,CAAR,EAAYkE,yDAAZ,EACZC,IADY,CACU,2DAAS,yBAAT,CADV,EAEZlD,SAFY,CAEZ;AACA;AACA;;AACA;AAAA;AAAA;AACAmD;AACA,eAFA,MAGA;AAAA;AAAA;AACAA;AACA;;AACA;AAAA;AAAA;AACAC;AACA,eAFA,MAGA;AAAA;AAAA;AACAA;AACA;AACa,aAjBD;AAkBZ,WApBA;;AAqBA,yBAAuB,sEAAavD,OAAb,CAAvB;AACA;AACA;;AACAL;;AACA;AACA;AACA;;;;;iBACA;AACA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,oCADA,CAEA;AACA;;;AACA;;AACA;AACA6D;;AACA;AACA;AACA;AACAA;AACA;AACA,aAPA,MAQA;AACAA;AACA;;AACA;AACA;AACA;AACA,kEAnBA,CAoBA;AACA;AACA;;AACA;AACAC;AACA,aAzBA,CA0BA;AACA;;;AACA;AACAC;AACA,aA9BA,CA+BA;AACA;;;AACA;AACA;AACA1D;AACA0D;AACA,aAJA,MAKA;AACA;AACAC;AACAD;AACA,aAJA,MAKA;AACY,oFAAa,YAAb,EAAaE,WAAb,CAAa7B,WAAb;AACZ2B;AACA,aA9CA,CA+CA;;;AACA3B,6CAhDA,CAiDA;AACA;;AACA;;AACA,yCApDA,CAqDA;;;AACA;;AACA;AAA4BrB,wBAA5B;AAA4BG,6BAA5B;AAA4BF;AAA5B;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AAA2BD,wBAA3B;AAA2BG;AAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACAH,wBADA;AAEAC,wCAFA;AAGAC,0CAHA;AAIAC,6BAJA;AAKAC,kDALA;AAMAC,4DANA;AAOAtB,gCAPA;AAQAa;AARA;AAUA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACAuD;AAAA;AAAA;;AACA;AACA;AAAA;AAAA,iBADA,CAEA;AACA;;AACA;AAAA;AAAA;AACA;AACA,eAFA,MAGA;AACA;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,0BAAwB,sEAAa,YAAb,CAAxB,CADA,CAEA;AACA;;AACA,uCACA5F,oGADA;AAEA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA,aAHA,CAIA;AACA;AACA;;;AACA,0FACA,qCADA,GACA,mBADA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,6DACA,wFADA,EACA;AACA;AACA;;AACA;;AACA;;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA,yDAhBA,CAiBA;;AACA,wFAlBA,CAmBA;;;AACA,wFApBA,CAqBA;AACA;;;AACA,4CAvBA,CAwBA;;AACA6F;;AACA;AACAlD,yCADA;AAEAD,oCAFA;AAGAE,6BAHA;AAIAH;AAJA;AAMAqD;AACA;AACA;AACA;AACA;;AACA;AACA;AACA,mFACAC,6BADA,CAPA,CASA;;AACAA,uCAVA,CAWA;AACA;AACA;AACA;;AACA;AACA;AACA;AACAC,0FAAmFtB,0BAAnF,gBAA8GqB,wBAA9G;AACA5F;AACA,eALA,MAMA;AACA6F,6FAAsFtB,0BAAtF,aAAiHqB,wBAAjH;AACA5F;AACA;AACS,aAzBT,EAhCA,CA0DA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA,aANA,CAOA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA,4CACA8F,4EADA;;AAAA;;AACAC,uCADA;AACAC,yCADA;;AAEA;AACAC;AACA;AACA;AACS,aAZT,EARA,CAqBA;;;AACA;AACA,0CAAoC,qCAApC;AAAA,kBAAoB3G,KAApB,yBAAoBA,KAApB;AAAA,kBAAoBC,MAApB,yBAAoBA,MAApB;;AACA;AAAiCD,4BAAjC;AAAiCC,8BAAjC;AAAiCL,sBAAjC;AAAiCC,4BAAjC;AAAiCC,8BAAjC;AAAiCC;AAAjC;AACA0G;AACAC;AACAC;AACA;;AACA,4FACAD,6DADA,IAEAC,+BAFA,GAEA;AACA;AACA;AACA;;AACA;AACA;AACA,eAFA,MAGA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA,yBAAuB,sEAAa,YAAb,EAAaC,KAApC;AACA;AACA,oCAHA,CAIA;AACA;AACA;;AACA;AACAlH;;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AACA,0BAAwB,sEAAa,YAAb,CAAxB;;AACA,kEAFA,CAGA;AACA;;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA8F,0BADA;AAEAqB,yBAFA;AAGAC,wEAHA;AAIA5G;AAJA;AAMS,aART,EAQS6G,IART,CAQS;AACT,4EACAC,mCADA;AAES,aAXT;AAYA;AACA;;;;iBACA;AAAA;;AACA;AACA,yBAAuB,sEAAa,YAAb,EAAaJ,KAApC;AACAlH,sFAHA,CAIA;;AACA;AACA;;AACA;;AACA;AACA,oEACAuH,IADA,CACA;AAAA;AAAA,iBADA,OACA,IADA,IACAC,aADA,GACA,MADA,GACAA,mBADA;AAEA7E;AACA;AACS,aART;;AASA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA,0DAFA,CAGA;AACA;AACA;AACA;;AACA;AACA8E;AACA,eAFA,MAGA;AACAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,sFACAC,qCADA,CAFA,CAIA;;AACA;AACAC,uFACAD,2CADA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA,kEALA,CAMA;AACA;;AACA;;AACA;AACA;AACA;AACA,aAHA,MAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA,wEAA0EE,CAA1E,EAA0EjC,KAA1E,EAA0E;AAAA,kBAAlBG,IAAkB,SAAlBA,IAAkB;AAAA,kBAAlBtF,UAAkB,SAAlBA,UAAkB;;AAC1E;AACA;AACA;AACA;AACA;;AACA;AACA,iEADA,CAEA;AACA;AACA;;AACA,6FACAqH,yCADA,EACA;AACA;AACA;AACA;;AACA,oCACA;AACA;AACAnH,gGAHA,GAIAoH,kFAJA;AAKS,aArBT;AAsBA;AACA;AACA;;;;iBACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,oFACA,gCADA,EACA;AACA;AACA;;AACA,gFALA,CAMA;AACA;;;AACA;AACA;AACA;;AACA,gCAA8B,sEAAa,YAAb,CAA9B,CAXA,CAYA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACS,aANT,GAMS;AACTC;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,kEAA+D;AAAA,wBAAZvH,UAAY,SAAZA,UAAY;AAC/DQ;AACqB,mBAFrB,EALA,CAQA;AACA;;;AACA,kEAAyD;AAAA,wBAAN8E,IAAM,SAANA,IAAM;;AACzD;AACA;AACA;AACAA;AACA;AACqB,mBANrB;AAOA;AACA,eApBA,MAqBA;AACA;AACA;AACS,aAzBT;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,+BAA+B,uEAAe,sEAAa,YAAb,CAAf,CAA/B;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,wBAAoB5E,gBAApB,EAAsCA,GAAtC,EAAsC;AACtC;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACAsE;AACA,SAFA,MAGA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACAA;AACA,SAFA,MAGA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,YAAYtF,GAAZ,GAAkCM,UAAlC,CAAYN,GAAZ;AAAA,YAAYE,MAAZ,GAAkCI,UAAlC,CAAYJ,MAAZ;AAAA,YAAYG,MAAZ,GAAkCC,UAAlC,CAAYD,MAAZ;AACA;;AACA;AACA;AAAA;AAAA;AACA,SAFA,MAGA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,YAAYF,IAAZ,GAAiCG,UAAjC,CAAYH,IAAZ;AAAA,YAAYF,KAAZ,GAAiCK,UAAjC,CAAYL,KAAZ;AAAA,YAAYG,KAAZ,GAAiCE,UAAjC,CAAYF,KAAZ;AACA;;AACA;AACA;AAAA;AAAA;AACA,SAFA,MAGA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA,SAJA,CAKA;AACA;AACA;AACA;;AACA;AACA;;AACA;AAAA;AAAA;AACA;AACAyG;AAAA;AAAA;AACA;AACA,WAJA,MAKA;AACAA;AAAA;AAAA;AACA;AACA;;AACA;AACA;;AACA;AAAA;AAAA;AACA;AACAC;AAAA;AAAA;AACA;AACA,WAJA,MAKA;AACAA;AAAA;AAAA;AACA;AACA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,wCAAoC,wFAA+B;AACnEtF,sBADmE;AAEnEsG;AAFmE,OAA/B,CAApC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;UACAC;AACA;AAAA;;AAAA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AACA,iCAA+BnG,yCAA/B;AACA;AACA;AACA;AACA;;AACA,+BAA6BA,yCAA7B;AACA;;AACA,4BAA0BA,yCAA1B;AACA;AACA;AACA;AACA;;AACA;AACA;AACAE;AACA;AACA,WAJA;AAKA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;;AACA;AACA;AACA,WAVA;;AAWA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,0CADA,CAEA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACa,eAJb;AAKA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA,iEADA,CAEA;AACA;AACA;;;AACA,oCACAkG,GADA,CACAC,sCADA,EACA;AACAC;AAAA;AAAA,iBADA;AAEAC;AAFA,eADA,EAKAH,GALA,CAKA,QALA,EAKA;AACAE;AAAA;AAAA,iBADA;AAEA;AACA;AACAC;AAJA,eALA,EAWA;AACA;AACA;AACA;AAdA,eAeAH,GAfA,CAeA,aAfA,EAeA;AACAE,0DADA;AAEAC;AAFA,eAfA,EALA,CAwBA;AACA;;;AACA;AACA;AACAD;AAAA;AAAA,mBADA;AAEAC;AAFA;AAIA;;AACA;AACA;AACA;AACiB,iBAFjB;AAGa,eAJb;AAKA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;iBACA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACS,aAFT;;AAGA;AACA;;;;;;AAEAJ;AAA+D,4CAAmCK,uDAAgBA,iDAAhB,CAAnC,EAAmEA,uDAAgBC,qDAAhB,CAAnE;AAA2F,OAA1J;;AACAN,gCAAyBK,iEAAqB;AAAGE;AAA+C,uCAA4BF,uDAAYA,iDAAZ,CAA5B,EAAoDA,uDAAYC,qDAAZ,CAApD;AAAgF,SAAlI;AAAkIE,gCA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A;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA,gCAAuBsB,IAAvB,gFACsCpE,aADtC;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,+BAA0B8C,yDAA1B,CAAwC,aAAxC;;AACA;AACA;;UACAuB;AACA;AACA;AACAjH,eAFA,EAEAkH,QAFA,EAEAC,kBAFA,EAEAC,iBAFA,EAEAC,IAFA,EAEAC,MAFA,EAEAC,MAFA,EAEA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gCAA8BrI,yCAA9B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,4CAAmCsI,kBAAnC;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AACA;;;AACA;AAAA;AAAA;AACA;;;AACA,6BAA2B9B,uDAA3B;AACA;AACA;AACA;;AACA,6BAA2BA,uDAA3B;AACA;AACA;AACA;AACA;;AACA,4BAA0BA,uDAA1B;AACA;;AACA,4BAA0BA,uDAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA+B;AACA;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,WAFA;;AAGA,4CACA;AACA;AACA,WAHA;;AAIA;;AACA;;AACAR;;AACA;AACAK;AACA;AACA;AACA;;;;;eACA;AACA;AACA;eACA;AACA;AACA;AACA;AACA;AACA,0DAAsD,8EAAqB1H,KAArB,CAAtD;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,4HADA,CAEA;AACA;AACA;;;AACA;AACS,aANT;AAOA;;;iBACA;AACA;;AACA;AACAqH;AACA;;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA,+BACA5D,IADA,CACsB,4DAAS,eAAT,CADtB,EACkD,2DAAS,eAAT,CADlD,EAEAlD,SAFA,CAEA;AAAA;AAAA,eAFA;AAGA;;AACAuH;AACA,6BAA6B,oEAAW,mBAAX,EAAWC,GAAX,CAAW;AACxC;AACA;AAAA;AAAA;;AACA;AACAC,oGAAgGC,IAAhG;AACA;;AACA;AACA;;AACA;AACa,eATgB,CAA7B;;AAUA;AACA;AACA;AACA9D;AACA;AACiB,iBAJjB;AAKA,eAjBA,CAkBA;AACA;;;AACA;AACA,kEACA+D,2BADA,CACA,eADA,EAEAH,GAFA,CAEA;AAAA;AAAA,iBAFA;;AAGA,8EAJA,CAKA;AACA;;;AACA;AACA;;AACAD;AACAA;AACAA,oCAAkC,8EAAqB,uBAArB,CAAlC;AACAA,uCAAqC,8EAAqB,0BAArB,CAArC;AACAA,mCAAiC,6EAAoB,sBAApB,EAAoB,CAApB,CAAjC;AACAA,kBACAK,WADA,CACAhE;AAAA;AAAA;AAAA;AAAA,gBADA,EAEAiE,eAFA,CAEA,mBAFA;AAGS,aArCT;AAsCA;AACA;;;;iBACA;AAAA;;AACAN;AACA;;AACA;AACS,aAHT;AAIAA;AACA;AACA7G,kCADA;AAEAH,qCAFA;AAGAC;AAHA;AAKS,aANT;AAOA+G;AACA;AACA7G,kCADA;AAEAH;AAFA;;AAIA;AACS,aANT;AAOAgH;AACA;AACA9G,kDADA;AAEAD,gDAFA;AAGAE,kCAHA;AAIAH;AAJA;AAMS,aAPT;AAQAgH;AACA;AACA9G,kDADA;AAEAD,gDAFA;AAGAG,+DAHA;AAIAD,+CAJA;AAKAH,qCALA;AAMAK,oEANA;AAOAtB,wCAPA;AAQAa;AARA,iBADA,CAWA;AACA;;;AACA;AACS,aAdT;AAeA;AACA;;;;iBACA;AACA,gBAAgB2H,QAAhB,GAAuGV,MAAvG,CAAgBU,QAAhB;AAAA,gBAAgBC,gBAAhB,GAAuGX,MAAvG,CAAgBW,gBAAhB;AAAA,gBAAgBC,eAAhB,GAAuGZ,MAAvG,CAAgBY,eAAhB;AAAA,gBAAgBC,sBAAhB,GAAuGb,MAAvG,CAAgBa,sBAAhB;AAAA,gBAAgBC,eAAhB,GAAuGd,MAAvG,CAAgBc,eAAhB;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAA;AAAA;AACA;;;;;;AAEApB;AAAqD,uCAA8BvB,gEAAyBA,qDAAzB,CAA9B,EAA2EA,gEAAwBU,SAAxB,CAA3E,EAA+GV,gEAAyBA,4DAAzB,CAA/G,EAAmKA,gEAAyBW,oEAAzB,CAAnK,EAAsNX,gEAAyB4C,8DAAzB,EAA8C,CAA9C,CAAtN,EAA0Q5C,gEAAwB6C,oBAAxB,EAAwB,EAAxB,CAA1Q,EAA6T7C,gEAAwB8C,gBAAxB,EAAwB,CAAxB,CAA7T;AAAqV,OAA1Y;;AACAvB,uCAAiCvB,gEAAwB;AAAGK,0BAAH;AAAGQ,+DAAH;AAAGkC,uCAAH;AAAGC,mBAAH;AAAGC;AAAqL;AACzOjD,sEAAkB,IAAlB,EAAkBkD,MAAlB;;AACAlD,sEAAkB,wBAAlB,EAAkBkD,YAAlB,EAAkB,wBAAlB,EAAkBA,6BAAlB,EAAkB,yBAAlB,EAAkBA,8BAAlB;AACR;AAAO,SAHkD;AAGlDpC;AAAYuB,gEAAZ;AAAYc,kBAAZ;AAAYC,yEAAZ;AAAYC,sEAAZ;AAAYtC,uDAAZ;AAAY0B,4EAAZ;AAAYa,qFAAZ;AAAYC,gEAAZ;AAAYhB,uDAAZ;AAAYiB,2CAAZ;AAAYC;AAAZ,SAHkD;AAGsiBC;AAAaC,uCAAb;AAAaC,uCAAb;AAAaC,qCAAb;AAAaC;AAAb,SAHtiB;AAG2qB9C,iCAH3qB;AAG2qBC,mBAAwCjB,iEAAyB,CACryB;AACA;AAAckB,uCAAd;AAAc6C;AAAd,SAFqyB,EAGryB;AAAc7C,iCAAd;AAAcC;AAAd,SAHqyB,CAAzB,CAAxC;AAH3qB,OAAxB,CAAjC;AAQA;;AACAI;;AACAA;AAAA,gBACA;AAAMlB,gBAAML;AAAZ,SADA,EAEA;AAAMK;AAAN,SAFA,EAGA;AAAMA,gBAAML;AAAZ,SAHA,EAIA;AAAMK,gBAAMM;AAAZ,SAJA,EAKA;AAAMN,gBAAMuC,8DAAZ;AAA0BtC;AAAiBD,kBAAML;AAAvB;AAA1B,SALA,EAMA;AAAMK,iCAAN;AAAMC;AAAuCD,kBAAML;AAA7C,aAAuD;AAAIK,kBAAML,iDAAV;AAAgBO;AAAhB,WAAvD,EAAuG;AAAIF,kBAAML;AAAV,WAAvG;AAAN,SANA,EAOA;AAAMK,yBAAN;AAAMC;AAAgCD,kBAAML;AAAtC,aAAgD;AAAIK,kBAAML,iDAAV;AAAgBO;AAAhB,WAAhD;AAAN,SAPA;AAAA;;AASAgB;AACAc;AAAoBhC,gBAAML,gDAA1B;AAA+BO;AAA/B,UADA;AAEAiD;AAAanD,gBAAML,gDAAnB;AAAwBO;AAAxB,UAFA;AAGAgD;AAAoBlD,gBAAML,gDAA1B;AAA+BO;AAA/B,UAHA;AAIA4C;AAAW9C,gBAAML;AAAjB,UAJA;AAKAuC;AAAiBlC,gBAAML,gDAAvB;AAA4BO;AAA5B,UALA;AAMAQ;AAAiBV,gBAAML,gDAAvB;AAA4BO;AAA5B,UANA;AAOAkC;AAAwBpC,gBAAML,gDAA9B;AAAmCO;AAAnC,UAPA;AAQA6C;AAAuB/C,gBAAML,gDAA7B;AAAkCO;AAAlC,UARA;AASA8C;AAAsBhD,gBAAML,gDAA5B;AAAiCO;AAAjC,UATA;AAUA+C;AAA2BjD,gBAAML,gDAAjC;AAAsCO;AAAtC,UAVA;AAWAkD;AAAuBpD,gBAAML,gDAA7B;AAAkCO;AAAlC,UAXA;AAYAoD;AAAgBtD,gBAAML,iDAAtB;AAA4BO;AAA5B,UAZA;AAaAqD;AAAgBvD,gBAAML,iDAAtB;AAA4BO;AAA5B,UAbA;AAcAsD;AAAexD,gBAAML,iDAArB;AAA2BO;AAA3B,UAdA;AAeAuD;AAAezD,gBAAML,iDAArB;AAA2BO;AAA3B;AAfA;;AAiBA;AAAe,2DAAmDP,gEAAwBuB,YAAxB,EAAwB;AAC1FlB,gBAAcL,oDAD4E;AAE1FO;AACAa,oDADA;AAEAJ,mCAFA;AAGAK,wBACA;AACA;AAAsBH,2CAAtB;AAAsB6C;AAAtB,aAFA,EAGA;AAAsB7C,qCAAtB;AAAsBC;AAAtB,aAHA,CAHA;AAQA6C;AACA,sCADA;AAEA,+BAFA;AAGA,0DAHA;AAIA,2EAJA;AAKA;AALA;AARA;AAF0F,UAAxB,EAkB7D;AAAiB;AAAU3D,kBAAML;AAAhB,aAAmC;AAAIK;AAAJ,WAAnC,EAAuD;AAAIA,kBAAML;AAAV,WAAvD,EAA2F;AAAIK,kBAAMM;AAAV,WAA3F,EAA8H;AAAIN,kBAAMuC,8DAAV;AAA+BtC;AACnLD,oBAAsBL;AAD6J;AAA/B,WAA9H,EAEN;AAAIK,mCAAJ;AAAIC;AACpBD,oBAAsBL;AADF,eAEP;AACbK,oBAAsBL,iDADT;AAEbO;AAFa,aAFO,EAKP;AACbF,oBAAsBL;AADT,aALO;AAAJ,WAFM,EASN;AAAIK,2BAAJ;AAAIC;AACpBD,oBAAsBL;AADF,eAEP;AACbK,oBAAsBL,iDADT;AAEbO;AAFa,aAFO;AAAJ,WATM;AAcF,SAhC8C,EAgC9C;AAAI8B;AACxBhC,kBAAkBL,gDADM;AAExBO;AAFwB,YAAJ;AAGX4C;AACT9C,kBAAkBL;AADT,YAHW;AAKXoD;AACT/C,kBAAkBL,gDADT;AAETO;AAFS,YALW;AAQX8C;AACThD,kBAAkBL,gDADT;AAETO;AAFS,YARW;AAWXoD;AACTtD,kBAAkBL,iDADT;AAETO;AAFS,YAXW;AAcXqD;AACTvD,kBAAkBL,iDADT;AAETO;AAFS,YAdW;AAiBXsD;AACTxD,kBAAkBL,iDADT;AAETO;AAFS,YAjBW;AAoBXuD;AACTzD,kBAAkBL,iDADT;AAETO;AAFS,YApBW;AAuBXQ;AACTV,kBAAkBL,gDADT;AAETO;AAFS,YAvBW;AA0BXkC;AACTpC,kBAAkBL,gDADT;AAETO;AAFS,YA1BW;AA6BX+C;AACTjD,kBAAkBL,gDADT;AAETO;AAFS,YA7BW;AAgCXgD;AACTlD,kBAAkBL,gDADT;AAETO;AAFS,YAhCW;AAmCXgC;AACTlC,kBAAkBL,gDADT;AAETO;AAFS,YAnCW;AAsCXiD;AACTnD,kBAAkBL,gDADT;AAETO;AAFS,YAtCW;AAyCXkD;AACTpD,kBAAkBL,gDADT;AAETO;AAFS;AAzCW,SAhC8C,CAAnD;AA4EC,OA5EhB;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,iCAA4BP,yDAA5B,CAA0C,eAA1C;AACA;;;UACAiE;AACA;AAAA;;AACA;AACA;;AACA,mCAAiCzK,yCAAjC;AACA;;AACA;AACAuI;AACA;;AACA;AACA;AACA;;;;;eACA;AAAqB;AAAA;eACrB;AACA,6BAAyB,8EAAqB7H,KAArB,CAAzB;;AACA;AACA;;;iBACA;AACA;AACA;;;;;;AAEA+J;AAAyD,yCAAgCjE,gEAAyBA,qDAAzB,CAAhC,EAA6EA,gEAAwBkE,gBAAxB,EAAwB,EAAxB,CAA7E;AAAqG,OAA9J;;AACAD,yCAAmCjE,gEAAwB;AAAGK,4BAAH;AAAGQ,8CAAH;AAAGkC,yCAAH;AAAGjC;AAA0GC;AAA1G,SAAH;AAA8JE,mBAAajB,iEAAyB;AAAIkB,mCAAJ;AAAIC;AAAJ,UAAzB,CAAb;AAA9J,OAAxB,CAAnC;;AACA8C;AAAA,gBACA;AAAM5D,gBAAML;AAAZ,SADA,EAEA;AAAMK,yBAAN;AAAMC;AAAgCD,kBAAML,iDAAtC;AAA4CO;AAA5C,aAAwE;AAAIF,kBAAML;AAAV,WAAxE,EAA4F;AAAIK,kBAAML;AAAV,WAA5F;AAAN,SAFA;AAAA;;AAIAiE;AACAlD;AAAiBV,gBAAML,gDAAvB;AAA4BO;AAA5B;AADA;;AAGA;AAAe,2DAAmDP,gEAAwBiE,cAAxB,EAAwB;AAC1F5D,gBAAcL,oDAD4E;AAE1FO;AACAa,uCADA;AAEA4C;AACA;AADA,aAFA;AAKA3C;AAA8BH,uCAA9B;AAA8BC;AAA9B;AALA;AAF0F,UAAxB,EAS7D;AAAiB;AAAUd,kBAAML;AAAhB,aAAmC;AAAIK,2BAAJ;AAAIC;AAC7DD,oBAAsBL,iDADuC;AAE7DO;AAF6D,eAGhD;AACbF,oBAAsBL;AADT,aAHgD,EAKhD;AACbK,oBAAsBL;AADT,aALgD;AAAJ,WAAnC;AAOF,SAhB8C,EAgB9C;AAAIe;AACxBV,kBAAkBL,gDADM;AAExBO;AAFwB;AAAJ,SAhB8C,CAAnD;AAmBC,OAnBhB;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,sCAAiCP,yDAAjC,CAA+C,oBAA/C;AACA;AACA;AACA;AACA;;;UACAmE,sBACA;AAAA;;AACA;AACA;;AAEAA;AAAmE,8CAAqCnE,gEAAyBA,sDAAzB,CAArC;AAAgF,OAAnJ;;AACAmE,8CAAwCnE,gEAAwB;AAAGK,iCAAH;AAAGQ,8DAAH;AAAGC;AAA4F0C;AAA5F,SAAH;AAA6GvC,mBAAajB,iEAAyB;AAAIkB,wCAAJ;AAAIC;AAAJ,UAAzB,CAAb;AAA7G,OAAxB,CAAxC;;AACAgD;AAAA,gBACA;AAAM9D,gBAAML;AAAZ,SADA;AAAA;;AAGAmE;AACAX;AAAanD,gBAAML;AAAnB;AADA;;AAGA;AAAe,2DAAmDA,gEAAwBmE,mBAAxB,EAAwB;AAC1F9D,gBAAcL,oDAD4E;AAE1FO;AACAa,uDADA;AAEAC;AAA8BH,4CAA9B;AAA8BC;AAA9B;AAFA;AAF0F,UAAxB,EAM7D;AAAiB;AAAUd,kBAAML;AAAhB;AAAwC,SANI,EAMJ;AAAIwD;AAClEnD,kBAAkBL;AADgD;AAAJ,SANI,CAAnD;AAQC,OARhB;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,kCAA6BA,yDAA7B,CAA2C,gBAA3C;AACA;AACA;AACA;AACA;;;UACAoE;AACA;AAAA;;AACA;AACA;AACA;AACA;;;;;eACA;AAAsB;AAAA;eACtB;AAA2B,8BAAkB,8EAAqBlK,KAArB,CAAlB;AAAuC;;;;;;AAElEkK;AAA2D,0CAAiCpE,gEAAyBA,sDAAzB,CAAjC;AAA4E,OAAvI;;AACAoE,0CAAoCpE,gEAAwB;AAAGK,6BAAH;AAAGQ,0DAAH;AAAGC;AAAoFuD,gCAApF;AAAoFb;AAApF,SAAH;AAA6HvC,mBAAajB,iEAAyB;AAAIkB,oCAAJ;AAAIC;AAAJ,UAAzB,CAAb;AAA7H,OAAxB,CAApC;;AACAiD;AAAA,gBACA;AAAM/D,gBAAML;AAAZ,SADA;AAAA;;AAGAoE;AACAZ;AAAanD,gBAAML;AAAnB,UADA;AAEAqE;AAAkBhE,gBAAML;AAAxB;AAFA;;AAIA;AAAe,2DAAmDA,gEAAwBoE,eAAxB,EAAwB;AAC1F/D,gBAAcL,oDAD4E;AAE1FO;AACAa,mDADA;AAEAC;AAA8BH,wCAA9B;AAA8BC;AAA9B;AAFA;AAF0F,UAAxB,EAM7D;AAAiB;AAAUd,kBAAML;AAAhB;AAAwC,SANI,EAMJ;AAAIqE;AAClEhE,kBAAkBL;AADgD,YAAJ;AAErDwD;AACTnD,kBAAkBL;AADT;AAFqD,SANI,CAAnD;AAUC,OAVhB;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;UACAsE;AACA;AACA;AACAhK,eAFA;AAGA;AACAS,qBAJA;AAKA;AACA;AACA;AACA;AACAwJ,iBATA,EASAC,OATA,EASAC,iBATA,EASA5C,MATA,EASAF,IATA,EASAH,QATA,EASAC,kBATA,EASAiD,WATA,EASAC,WATA,EASA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA8BnL,yCAA9B;AACA;;AACA,6BAA2BwG,uDAA3B;AACA;;AACA,8BAA4BA,uDAA5B;AACA;;AACA,2BAAyBA,uDAAzB;AACA;;AACA,6BAA2BA,uDAA3B;AACA;;AACA,4BAA0BA,uDAA1B;AACA;;AACA,6BAA2BA,uDAA3B;AACA;AACA;AACA;AACA;;AACA,2BAAyB4E,6CAAzB,CAAmC;AACnC,2DAA0D,sDAAG;AAAA;AAC7D/K,+BAD6D;AAE7DC,2DAF6D;AAG7DJ,uCAH6D;AAI7DM,uCAJ6D;AAK7DD;AAL6D;AAAA,aAAH,CAA1D,EAMaU,SANb,CAMaoK,QANb;;AAOA;AACAC;AACA,aAFA;AAGS,WAXT;AAYA;AACAtE,8EACAqB,yBADA,GACA,CAFA;AAGApB,wGACAoB,sCADA,GACA,CAJA;AAKA5F;AALA;AAOA,oCA7CA,CA8CA;AACA;AACA;;AACAqI;;AACA;AACA;AACA,WApDA,CAqDA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACAvJ;AACA;;AACA;;AACA;AACA;AACA;;;;;eACA;AACA;AACA;eACA;AACA,6BAAyB,8EAAqBb,KAArB,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;AACA,kCACAyD,IADA,CACkB,uDAAI,CAAJ,CADlB,EAC2B,2DAAS,eAAT,CAD3B,EAEAlD,SAFA,CAEA;AACA,2CADA,CAEA;;;AACA,4CAAuC,4DAAS,gBAAT,CAAvC,EACA;AACY,oEAAG;AACf,kDACAsK,MADA,CACA;AAAA;AAAA,iBADA,EAEA9C,GAFA,CAEA;AAAA;AAAA,iBAFA,EADe,CAIf;AACA;AACA;;AACA;AACA+C;AACA;;AACA;AACa,eAXD,CAFZ,EAcA;AACY,0EAAS;AACrB,uBAAuB,+EAAKC;AAC5B,iDAAmD,4DAASjK,IAAT,CAAnD;AACiB,iBAFW,CAAL,EAAvB;AAGa,eAJD,CAfZ,EAmBgB,2DAAS,kBAAT,CAnBhB,EAmByBP,SAnBzB,CAmByB;AACzB;AACA;AACA;AACAyK;AACa,eAxBb;;AAyBA;AACA;AACA;AACS,aAjCT;AAkCA;;;iBACA;AACA;AACA,6DAFA,CAGA;AACA;;AACA;AACA;AACA,aAPA,CAQA;;;AACA;AACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;;AACA;;AACA;AACAZ;AACA;;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA,yDACAa,6DADA,GACA7K,OADA;;AAEA;AACAyH;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,0BAAwB,sEAAaqD,QAAb,CAAxB;;AACA,mEACA,6CADA,EACA;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACApD;AACA;AACA;AACA;AACA;AACAqD,oEADA;AAEAlM,4DAFA;AAGAmM;AAHA,oBAIkB,IAJlB;AAKA;AACAD,gEADA;AAEAlM,wDAFA;AAGAkL,+DAHA;AAIAiB;AAJA,oBAKkB,IALlB;AAMAtD;AACAA;AACAA,4FACAuD,cADA,GACqC,6EAAoBA,cAApB,CADrC;AAEAvD;AACAA;AACAA,oBACAwD,mBADA,CACA,6BADA,EAEAC,uBAFA,CAEApJ,WAFA,EAGAqJ,mBAHA,CAGA/J,OAHA,EAIAgK,oBAJA,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7D,IAN6D,EAM7D,IAN6D,CAAnD;AAMO,OANtB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,kDAA6CoG,yDAA7C,CAA2D,kCAA3D;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AACAlG,kDADA;AAEA6I,eAAWC,yDAAX,CAFA;AAGAC;AAHA;AAKA;AACA;AACA;AACA;;AACA;AACA/I,iBAAagJ,6DADb;AAEA/I,qBAAiB,2DAAU;AAAA;AAAA,SAAV,CAFjB;AAGAgJ;AAHA;AAKA;AACA;AACA;AACA;;AACA;AACA,0FACA,4EADA,GAEA,kEAFA;AAGA;AACA;;;UACAC;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA,uCAAqC3Q,oDAArC;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA,0CAAwC4Q,yCAAxC;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,0CACA,uFADA;AAEA,WANA;AAOA;;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,kCAAgC,8CAAK;AACrC;AACA,qBAAuB,+EAAK;AAAA;AAAA,gBAAL,EAAvB;AACA,aAHqC,CAIrC;AACA;;;AACA,0CACA1M,IADA,CACsB,uDAAI,CAAJ,CADtB,EAC+B,4DAAS;AAAA;AAAA,aAAT,CAD/B;AAES,WARuB,CAAhC;AASA;AACA;AACA;AACA;AACA;AACA;;;;;eACA;AAAiC;AAAA;eACjC;AACA,yCAAqC,8EAAqBzD,KAArB,CAArC;AACA;;;iBACA;AAAA;;AACA;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;iBACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;iBACA;AACA;;AACA;AACAoQ;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AACA;;;;eACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;;AACA;AACA,aAbA,CAcA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAA;;AACA,mBAAe,8CAAK,qBAAL,EAAK,0CAAkE,yDAAM;AAAA;AAAA,aAAN,CAAlE,CAAL,EAA6E,yBAA7E,EAA6E,6BAA7E,EAA6E,mBAC5F,oCAAgD,yDAAM;AAAA;AAAA,aAAN,CAAhD,CAD4F,GAEhF,4CAFG,EAED3M,IAFC,EAGf;AACQ,kEAAG;AAAA,sCAA2BqL,4EAA3B,GAAmDtP,KAAnD,GAAmD,IAAnD;AAAA,aAAH,CAJO,CAAf;AAKA;AACA;;;;eACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,mBAAe,8CAAM,kDAAS,cAAT,EAAS,OAAT,CAAN,EAA0C,kDAAS,cAAT,EAAS,UAAT,CAA1C,EAAiF,kDAAS,cAAT,EAAS,UAAT,CAAjF,EACfiE,IADe,CACG,yDAAM;AACxB;AACA;AACA,8GACAjE,YADA;AAEA;AACA;AACA,oGACA,8CADA,MAEA,oDAFA,KAGA,kFAHA;AAIS,aAXS,CADH,CAAf;AAaA,YACA;;;;iBACA;AAAA;;AACA6Q;AAAA;AAAA;AACA,YACA;;;;iBACA;AACA;AACA,YACA;;;;iBACA;AACA;AACA,YACA;;;;iBACA;AACA;AACA;;;iBACA;AACA,wCADA,CAEA;AACA;AACA;AACA;;AACA,4BAAwBC,0DAAxB,IAA8B,CAAK,wEAAc9Q,KAAd,CAAnC,EAAiD;AACjDA;AACA;;AACA,iDAA6C8Q,yDAA7C,IAAkD,cAAlD,EAAkD;AAClD;;AACA;;AACA9Q;AACA,aAJA,MAKA;AACA;AACA,2CAA2C8Q,4DAA3C,IAAmDC,YAAgBD,8DAAnE;;AACA,gDAA8CA,uDAA9C,EAAiD;AACjD;AACA,eAFA,MAGA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;iBACA;AACA;AACA,qCAFA,CAGA;;AACA;AACAtQ;AACA,aANA,CAOA;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;;;iBACA;AACA;AACA;AACA,aAFA,MAGA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA,eAFA,MAGA;AACA;AACA;;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,uDAAqD,uDAAI,CAAJ,CAArD;;AACA,uEAAqE,sDAAG;AAAA;AAAA,aAAH,CAArE,EACA;AACA;AACQ,oEAAK,CAAL,CAHR,EAFA,CAMA;;AACA,mBAAe,8CAAKwQ,WAAL,EAAKC,aAAL,EACfhN,IADe,EAEf;AACA;AACQ,wEAAS;AACjB;;AACA;;AACA;;AACA;AACA,qDADA,CAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AACA;AACS,aAfD,CAJO,EAoBf;AACQ,mEAAI,CAAJ,CArBO,EAsBf;AAtBe,aAuBflD,SAvBe,CAuBf;AAAA;AAAA,aAvBe,CAAf;AAwBA;AACA;;;;iBACA;AACA;AACA;;AACA;;AACA;AACA;AACA;;;iBACA;AACA,iFACA,oCADA,GAEAP,KAFA,CADA,CAIA;AACA;;AACA,gEANA,CAOA;AACA;;AACA;AACA;AACA,aAFA,MAGA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACAqN;AACA;AACS,aAJT;AAKA;;;iBACA;AAAA;;AACA;;AACA;AACA;AACA,aAJA,CAKA;AACA;;;AACA;AACA,2CAAyC,uEAAc,2BAAd,CAAzC;AACA;;AACA;;AACA;AACA,iCAA+BqD,gEAA/B,CAA6C,0BAA7C,EAA6C,sBAA7C,EAA6C;AAAuD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;;AACA,2DACAI,mDADA,EACA;AACAA;AACA;AACA,aAJA,MAKA;AACAA;AACA;AACA;;;iBACA;AACA;AAA8BoS;AAA9B;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;AACA;;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA;AAAiCA;AAAjC;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AAAgCA;AAAhC;AACA;AACA;AACA;;;;iBACA;AACA;AACAhT;AACA,aAFA,MAGA;AACAA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA,mBAAiBiT,yDAAjB;AACA,mBAAiBA,4DAAjB;AACA;AACA,8BAFA,CAGA;;AACAjT;AACA;;AACA,mBAAiBiT,wDAAjB;AACA;AACA;AACA;AACA,iBAJA,CAKA;;;AACAjT;AACA;AAfA;AAiBA;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;AACA,kCACAiE,IADA,CACkB,sDAAI,CAAJ,CADlB,EAEAlD,SAFA,CAEA;AACA;AACA;;AACA;AAAoCiS;AAApC;AACa,eAHb;AAIS,aAPT;AAQA;;;iBACA;AAAA;AACA;AACA7S,0BADA;AAEA+S,sCAFA;AAGAR;AAHA;AAKA;;;;QApNAS;;AAsNAL;AAA6C,mCAA0BpF,gEAAyBA,qDAAzB,CAA1B,EAAuEA,gEAAyBA,iDAAzB,CAAvE,EAAgHA,gEAAyB0F,2DAAzB,CAAhH,EAA2J1F,gEAAyB4B,6EAAzB,EAAkD,CAAlD,CAA3J,EAAmN5B,gEAAyBA,4DAAzB,CAAnN,EAAuQA,gEAAyB2F,qDAAzB,CAAvQ,EAA2S3F,gEAAyB4F,uFAAzB,EAA8C,CAA9C,CAA3S,EAA+V5F,gEAAwB,UAAxB,CAA/V;AAAuX,OAApa;;AACAoF,mCAA6BpF,gEAAwB;AAAG/G,sBAA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AAkDA;AACA;;;;;eACA;AACA;AACA;AACA;;;;eACA;AAAiB;AAAA;AACjB;;;;eACA;AAAqB;AAAA;eACrB;AACA,6BAAyB,8EAAqBlN,KAArB,CAAzB;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAwB;AAAA;eACxB;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAkB;AAAA;eAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAqB;AAAA;eACrB;AACA,6BAAyB,8EAAqBA,KAArB,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;eACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAA6B;AAAA;AAC7B;AACA;AACA;AACA;;;;eACA;AAAqB;AAAA;eACrB;AACA,6BAAyB,8EAAqBA,KAArB,CAAzB;;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAuB;AAAA;eACvB;AAAA;;AACA,+BAA2B,8EAAqBA,KAArB,CAA3B;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;eACA;AACA;AACA;AACA;AACA;;;;eACA;AACA,mBAAe,8EAAK;AAAA;AAAA,cAAL,EAAf;AACA;AACA;;;;eACA;AACA,mBAAe,8EAAK;AAAA;AAAA,cAAL,EAAf;AACA;AACA;;;;eACA;AACA,mBAAe,8EAAK;AAAA;AAAA,cAAL,EAAf;AACA;AACA;;;;eACA;AACA,mBAAe,8EAAK;AAAA;AAAA,cAAL,EAAf;AACA;;;iBACA;AAAA;;AACA,mCAA+BmU,+DAA/B,CAA8C,UAA9C,EACAtG,QADA,GAEAuG,uBAFA,GAGAC,cAHA,GAIAC,yBAJA,CAIA,mCAJA;;AAKA;AACA,+BACA7Q,IADA,CACsB,4DAAS,eAAT,CADtB,EAEAlD,SAFA,CAEA;AAAA;AAAA,eAFA;AAGA;;AACA,yCAAqC,4DAAS,eAAT,CAArC,EAA8CA,SAA9C,CAA8C;AAC9C;AACS,aAFT,EAXA,CAcA;;;AACA,oCAAgC,4DAAS,IAAT,CAAhC,EAAiD,4DAAS,eAAT,CAAjD,EAA0DA,SAA1D,CAA0D;AAC1D;AACA;AACA;AACA8P;AACA;AACiB,iBAFjB;AAGA;;AACA,oCAR0D,CAS1D;;;AACA,6CAV0D,CAW1D;;;AACA,wCAZ0D,CAa1D;;;AACA;;AACA;AACS,aAhBT;AAiBA;;;iBACA;AACA,uCAAmCkE,qEAAnC,CAAiD,aAAjD,EAAiDhT,SAAjD,EAAiD,KAAjD;AACA;AACA;;;iBACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;iBACA;AACA;;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AACA,2CADA,CAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAA6B;AAAA,YAC7B;;;;iBACA;AACA;AACA;AACA;AACA,YACA;;;;iBACA;AACA;AACA,YACA;;;;iBACA;AACA;AACA,YACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA,aAHA,CAIA;AACA;;;AACA,6DACA;AACA,aAFA,MAGA;AACA;;AACA;AACA,aAHA,MAIA;AACA;;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;AACA;AACA,eAHA,MAIA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;iBACA;AAAA;;AAAA;;AACA;;AACA;AAAA;AAAA;;AACA;AACAvB;AAAA;AAAA;;AACA;AACA,aAHA,MAIA;AACA,4EADA,CAEA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AAAA;AACA;AACA;AACS,aAFT;;AAGA;AACA0S;;AACA;AACA;;AACA;AACA;;;iBACA;AAAA;;AACA;AACA;AACArC;AACA;AACA;;AACA;AACA;AACS,aALT;AAMA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACAmC;AACA;AACS,aAJT;AAKA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACa,eAJb;AAKA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACAgC;AAAA;AAAA;AACA,aAFA,MAGA;AACAA;AACA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;AACiB,iBAJjB;AAKA,eAVA,MAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACAA;AACA;;AACA;AACa,eAHb;AAIA;AACA;;;iBACA;AACA;;AACA;;AACA;;AACA;AACA;;;iBACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACAjV,sCACA,4CADA,GAEA,8CAFA,CADA,CAIA;;AACA;AACA;AACA;AACAgT;AACA;AACiB,iBAJjB;AAKA;;AACA;AACA;AACA;AACS,aAfT;AAgBA;AACA;;;;iBACA;AAAA;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACS,aANT;AAOA;AACA;;AACA;AACS,aAHT;AAIA;;;iBACA;AAAA;;AACA;AACA;;AACA,0EAFA,CAGA;AACA;AACA;;;AACA;AACA;AACA;AACS,aATT;AAUA;AACA;;;;iB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ATW;AAWXlN;AACTmG,kBAAkB+G;AADT,YAXW;AAaX8H;AACT7O,kBAAkB+G;AADT,YAbW;AAeX/K;AACTgE,kBAAkB+G;AADT,YAfW;AAiBXrG;AACTV,kBAAkB+G;AADT,YAjBW;AAmBXkG;AACTjN,kBAAkB+G;AADT,YAnBW;AAqBXiG;AACThN,kBAAkB+G;AADT,YArBW;AAuBX+H;AACT9O,kBAAkB+G;AADT,YAvBW;AAyBXkI;AACTjP,kBAAkB+G,0DADT;AAET7G;AACA;AACA;AACAqG;AAHA;AAFS;AAzBW,SAvC8C,CAAnD;AAuEC,OAvEhB;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;UACA2I;AACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA,6BAA2BnI,uDAA3B;AACA;;AACA;AACA;;AACA,kDAAyCoI,cAAzC;AACA;AACA;AACA;AACA;;;;;eACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAsB;AAAA;eACtB;AAA2B,8BAAkB,8EAAqBtV,KAArB,CAAlB;AAAuC;AAClE;;;;eACA;AAAqB;AAAA;eACrB;AAA0B,6BAAiB,8EAAqBA,KAArB,CAAjB;AAAsC;AAChE;;;;eACA;AAAkB;AAAA;;;iBAClB;AACA;AACA;;;iBACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA,oCAAkCyS,sDAAlC,IAAqC,CAAK,uEAAcjT,KAAd,EAAc,UAAd,CAA1C,EAAwD;AACxD;AACA,eALA,CAMA;AACA;AACA;;;AACA,oCAAkCiT,4DAAlC,IAA2C,8BAA3C,EAA2C;AAC3C;;AACAjT;AACA;AACA,eAJA,MAKA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,qEAAiEiT,4DAAjE,IAA0E,UAA1E,EAA0E;AAC1E;AACAjT;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA,iCAJA,CAKA;;AA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CA;;;;iBACA;AACA;AACA;;;;;;UAEOC;;;;;AACP;AAAA;;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;;;;iBACA;AACA;;AACA,gBAAY,wDAAOzW,KAAP,CAAZ,EAAmB;AACnB0W;AACA,aAFA,MAGA,iBAA8BC,+DAA9B,MAA6C,UAA7C,EAA6C;AAC7CD,sDAAoDC,+DAApD;AACA,aAFA,MAGA;AACAD;AACA;AACA;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;;AACA,4BAAwBhY,OAAxB,EAAiCA,GAAjC,EAAiC;AACjC;;AACA;AACA;AACAkY;AACA,eAHA,MAIA;AACA;AACA;AACA;AACA;;;iBACA;AACA;;AACA;AACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;;AACA,4BAAwBlY,OAAxB,EAAiCA,GAAjC,EAAiC;AACjC;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA,8BAAwBA,SAAxB,EAAiCA,KAAjC,EAAiC;AACjC;;AACA;;AACA;AACAmY;AACA;;AACA;AACAD;AACA;AACA;;AACAvQ;AACA;;AACA;AACA;AACA,aAFA,MAGA;AACAuQ;AACA;;AACA;AACAA;AACA;AACA;;;iBACA;AACA;;AACA;AACAE;AACA,aAFA,CAGA;AACA;AACA;AACA;;AACA;AACA;;;;QA1FmCC;;UA4FnCC;AACA;AAAA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;;;;;;UAEAC;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA,iBAAoB;AACpB;AACA;;;iBACA;AACA;AACA;AACA;AAAmCjX,6BAAnC;AAAmCkX;AAAnC,gBAAkE;AAAIlX,yBAAJ;AAAIkX;AAAJ,aAAlE;AACA;;;iBACA;AACA;AACA;;;iBACA;AACA;AACA;;;;QAbKP;;UAeLQ;;;;;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;;;;iBACA,iBAAoB;AACpB;AACA;;;iBACA;AACA;;AACA;AACA;AAAqBnX,2BAArB;AAAqBkX;AAArB;AACA,aAFA,MAGA;AACA;AAAqBlX,qCAArB;AAAqBkX;AAArB;AACA;AACA;;;iBACA;AACA;AACA;;;iBACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;AACA,aAHA,MAIA;AACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;;;iBACA;AACA,mBAAe,iEAAc,eAAd,EAAc,IAAsBE,kEAAtB,CAA2C,IAA3C,CAAd,CAAf;AACA;;;;QA1CgCA,oEAS3BT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC9GiBU;AAQrB,iCACoBC,UADpB,EAC0C;AAAA;;AAAtB;AAPZ,2BAAkC,EAAlC;AACA,0BAAgC,EAAhC;AAEA,yBAAwD,EAAxD;AACA,0BAAoD,EAApD;AAIH;;;;iBAGL,sBAAaC,IAAb,EAA2B;AAAA;;AAC1B,gBAAMC,YAAY,GAAGD,IAAI,CAACE,IAAL,CAAU,GAAV,CAArB;AACA,gBAAIC,MAAM,GAAG,KAAKC,OAAL,CAAaH,YAAb,CAAb;;AACA,gBAAI,CAACE,MAAL,EAAa;AACZA,oBAAM,GAAG,KAAKE,gBAAL,CAAsB,KAAKD,OAA3B,EAAoCH,YAApC,EAAkDjW,SAAlD,CAAT;;AAEA,mBAAKsW,aAAL,CAAmBN,IAAnB,EAAyB9T,IAAzB,CACC,qDAAI,gBAAM,EAAG;AACZ,oBAAIqT,MAAJ,EAAY;AACX,sBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,sEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,yBAAOjB,MAAM,CAACoB,OAAP,IAAkBpB,MAAM,CAACoB,OAAP,CAAeC,GAAjC,GAAuCrB,MAAvC,GAAgDvV,SAAvD;AACA;AACD,eARD,CADD,EAUC,qDAAI,gBAAM,EAAG;AACZ,oBAAIuV,MAAM,IAAIA,MAAM,CAACoB,OAAP,CAAeC,GAAf,CAAmBC,MAAnB,IAA6Bb,IAAI,CAACa,MAAhD,EAAwD;AACvD,sBAAMD,GAAG,GAAarB,MAAM,CAACoB,OAAP,CAAeC,GAArC;AACA,sBAAM/X,OAAO,GAAY0W,MAAM,CAACoB,OAAP,CAAe9X,OAAxC;;AACA,sBAAIA,OAAJ,EAAa;AACZ,2BAAI,CAACwX,gBAAL,CAAsB,OAAI,CAACvZ,QAA3B,EAAqC+B,OAAO,CAACiY,GAA7C,EAAkDjY,OAAlD,EAA2D,IAA3D;AACA;;AAED,sBAAMkY,WAAW,GAAa,EAA9B;;AACA,uBAAK,IAAI9G,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG+F,IAAI,CAACa,MAAjC,EAAyC5G,KAAK,EAA9C,EAAkD;AACjD8G,+BAAW,CAACC,IAAZ,CAAiBhB,IAAI,CAAC/F,KAAD,CAArB;;AACA,2BAAI,CAACoG,gBAAL,CAAsB,OAAI,CAACD,OAA3B,EAAoCW,WAAW,CAACb,IAAZ,CAAiB,GAAjB,CAApC,EAA2D;AAC1DxO,wBAAE,EAAEkP,GAAG,CAAC3G,KAAD,CADmD;AAE1DpR,6BAAO,EAAGoR,KAAK,IAAK+F,IAAI,CAACa,MAAL,GAAc,CAAxB,IAA8BhY,OAA9B,GAAwCA,OAAxC,GAAkDmB;AAFF,qBAA3D,EAGG,IAHH;AAIA;AACD;AACD,eAjBD,CAVD,EA2BKhB,SA3BL;AA4BA;;AACD,mBAAOmX,MAAM,CAACc,WAAd;AACA;;;iBAED,oBAAWH,GAAX,EAAgD;AAAA,gBAAxBI,QAAwB,uEAAJ,IAAI;AAC/C,gBAAIf,MAAM,GAAG,KAAKgB,QAAL,CAAcL,GAAd,CAAb;;AACA,gBAAI,CAACX,MAAL,EAAa;AACZA,oBAAM,GAAG,KAAKE,gBAAL,CAAsB,KAAKc,QAA3B,EAAqCL,GAArC,EAA0C9W,SAA1C,EAAqD,IAArD,CAAT;AACAkX,sBAAQ,GAAG,KAAX;AACA;;AAED,gBAAI,CAACA,QAAL,EAAe;AACd,yDAAI,KAAKE,YAAL,CAAkB;AAAEN,mBAAG,EAAHA;AAAF,eAAlB,CAAJ,EAAgC,KAAKO,WAAL,CAAiB;AAAEP,mBAAG,EAAHA;AAAF,eAAjB,CAAhC,EACE5U,IADF,CAEE,qDAAI,gBAAM,EAAG;AACZ,oBAAIqT,MAAM,IAAIA,MAAM,CAACsB,MAAP,GAAgB,CAA1B,KAAgCtB,MAAM,CAAC,CAAD,CAAN,IAAaA,MAAM,CAAC,CAAD,CAAnD,CAAJ,EAA6D;AAC5DY,wBAAM,CAACmB,eAAP,CAAuBC,IAAvB,CAA4B;AAC3BC,6BAAS,EAAEjC,MAAM,CAAC,CAAD,CADU;AAE3BzY,4BAAQ,EAAEyY,MAAM,CAAC,CAAD;AAFW,mBAA5B;AAIA;AACD,eAPD,CAFF,EAWEvW,SAXF;AAYA;;AACD,mBAAOmX,MAAM,CAACc,WAAd;AACA;;;iBAGD,sBAAa3S,OAAb,EAA2C;AAAA;;AAC1C,mBAAO,KAAKmT,aAAL,CAAmBnT,OAAnB,EAA4BpC,IAA5B,CACN,qDAAI,gBAAM,EAAG;AACZ,kBAAIqT,MAAJ,EAAY;AACX,oBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,oEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,uBAAOjB,MAAM,CAACoB,OAAP,YAA0Be,KAA1B,GAAkCnC,MAAM,CAACoB,OAAzC,GAAiE3W,SAAxE;AACA;AACD,aARD,CADM,EAUN,qDAAI,gBAAM,EAAG;AACZ,kBAAIuV,MAAJ,EAAY;AAAA,4DACWA,MADX;AAAA;;AAAA;AACX,wEAA8B;AAAA,wBAAnBoB,OAAmB;;AAC7B,2BAAI,CAACN,gBAAL,CAAsB,OAAI,CAACmB,SAA3B,EAAsCb,OAAO,CAACG,GAA9C,EAAmDH,OAAnD;AACA;AAHU;AAAA;AAAA;AAAA;AAAA;AAIX;AACD,aAND,CAVM,CAAP;AAkBA;;;iBAGD,qBAAYrS,OAAZ,EAAyC;AAAA;;AACxC,mBAAO,KAAKqT,YAAL,CAAkBrT,OAAlB,EAA2BpC,IAA3B,CACN,qDAAI,gBAAM,EAAG;AACZ,kBAAIqT,MAAJ,EAAY;AACX,oBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,oEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,uBAAOjB,MAAM,CAACoB,OAAP,YAA0Be,KAA1B,GAAkCnC,MAAM,CAACoB,OAAzC,GAAgE3W,SAAvE;AACA;AACD,aARD,CADM,EAUN,qDAAI,gBAAM,EAAG;AACZ,kBAAIuV,MAAJ,EAAY;AAAA,4DACWA,MADX;AAAA;;AAAA;AACX,yEAA8B;AAAA,wBAAnBoB,OAAmB;;AAC7B,2BAAI,CAACN,gBAAL,CAAsB,OAAI,CAACvZ,QAA3B,EAAqC6Z,OAAO,CAACG,GAA7C,EAAkDH,OAAlD;AACA;AAHU;AAAA;AAAA;AAAA;AAAA;AAIX;AACD,aAND,CAVM,CAAP;AAkBA;;;iBAGD,wBAAeiB,QAAf,EAAiCC,QAAjC,EAAmD;AAAA;;AAClD,mBAAO,KAAKC,eAAL,CAAqBF,QAArB,EAA+BC,QAA/B,EAAyC3V,IAAzC,CACN,qDAAI,gBAAM,EAAG;AACZ,kBAAIqT,MAAJ,EAAY;AACX,oBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,oEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,uBAAOjB,MAAM,CAACoB,OAAd;AACA;AACD,aARD,CADM,EAUN,qDAAI,gBAAM,EAAG;AACZ,kBAAIpB,MAAJ,EAAY;AACX,uBAAI,CAACc,gBAAL,CAAsB,OAAI,CAACmB,SAA3B,EAAsCjC,MAAM,CAACuB,GAA7C,EAAkDvB,MAAlD;;AAEA,oBAAIA,MAAM,CAACwC,SAAX,EAAsB;AACrB,yBAAI,CAACC,UAAL,CAAgBzC,MAAM,CAACwC,SAAvB,EAAkC,KAAlC,EAAyC/Y,SAAzC;AACA;AACD;AACD,aARD,CAVM,CAAP;AAoBA;;;iBAGD,uBAAciZ,UAAd,EAAkCpZ,OAAlC,EAAkD;AAAA;;AACjD,mBAAO,KAAKqZ,cAAL,CAAoBD,UAApB,EAAgCpZ,OAAhC,EAAyCqD,IAAzC,CACN,qDAAI,gBAAM,EAAG;AACZ,kBAAIqT,MAAJ,EAAY;AACX,oBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,oEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,uBAAOjB,MAAM,CAACoB,OAAd;AACA;AACD,aARD,CADM,EAUN,qDAAI,gBAAM,EAAG;AACZ,kBAAIpB,MAAJ,EAAY;AACX,uBAAI,CAACc,gBAAL,CAAsB,OAAI,CAACvZ,QAA3B,EAAqCyY,MAAM,CAACuB,GAA5C,EAAiDvB,MAAjD;;AACA,uBAAI,CAACyC,UAAL,CAAgBzC,MAAM,CAAC4C,WAAvB,EAAoC,KAApC,EAA2CnZ,SAA3C;AACA;AACD,aALD,CAVM,CAAP;AAiBA;;;iBAGD,wBAAeiZ,UAAf,EAAmCJ,QAAnC,EAAqD;AAAA;;AACpD,mBAAO,KAAKO,eAAL,CAAqBH,UAArB,EAAiCJ,QAAjC,EAA2C3V,IAA3C,CACN,qDAAI,gBAAM,EAAG;AACZ,kBAAIqT,MAAJ,EAAY;AACX,oBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,oEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,uBAAOjB,MAAM,CAACoB,OAAd;AACA;AACD,aARD,CADM,EAUN,qDAAI,gBAAM,EAAG;AACZ,kBAAIpB,MAAJ,EAAY;AACX,uBAAI,CAACc,gBAAL,CAAsB,OAAI,CAACmB,SAA3B,EAAsCjC,MAAM,CAACuB,GAA7C,EAAkDvB,MAAlD;;AACA,oBAAIA,MAAM,CAACwC,SAAX,EAAsB;AACrB,yBAAI,CAACC,UAAL,CAAgBzC,MAAM,CAACwC,SAAvB,EAAkC,KAAlC,EAAyC/Y,SAAzC;AACA;AACD;AACD,aAPD,CAVM,CAAP;AAmBA;;;iBAGD,uBAAcqZ,SAAd,EAAiCxZ,OAAjC,EAAiD;AAAA;;AAChD,mBAAO,KAAKyZ,cAAL,CAAoBD,SAApB,EAA+BxZ,OAA/B,EAAwCqD,IAAxC,CACN,qDAAI,gBAAM,EAAG;AACZ,kBAAIqT,MAAJ,EAAY;AACX,oBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,oEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,uBAAOjB,MAAM,CAACoB,OAAd;AACA;AACD,aARD,CADM,EAUN,qDAAI,gBAAM,EAAG;AACZ,kBAAIpB,MAAJ,EAAY;AACX,uBAAI,CAACc,gBAAL,CAAsB,OAAI,CAACvZ,QAA3B,EAAqCyY,MAAM,CAACuB,GAA5C,EAAiDvB,MAAjD;;AACA,uBAAI,CAACyC,UAAL,CAAgBzC,MAAM,CAAC4C,WAAvB,EAAoC,KAApC,EAA2CnZ,SAA3C;AACA;AACD,aALD,CAVM,CAAP;AAiBA;;;iBAGD,wBAAeiZ,UAAf,EAAiC;AAAA;;AAChC,mBAAO,KAAKM,eAAL,CAAqBN,UAArB,EAAiC/V,IAAjC,CACN,qDAAI,gBAAM,EAAG;AACZ,kBAAIqT,MAAJ,EAAY;AACX,oBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,oEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,uBAAOjB,MAAM,CAACoB,OAAd;AACA;AACD,aARD,CADM,EAUN,qDAAI,gBAAM,EAAG;AACZ,kBAAIpB,MAAJ,EAAY;AACX,uBAAI,CAACc,gBAAL,CAAsB,OAAI,CAACmB,SAA3B,EAAsCjC,MAAM,CAACuB,GAA7C,EAAkD9W,SAAlD;;AAEA,oBAAIuV,MAAM,CAACwC,SAAX,EAAsB;AACrB,yBAAI,CAACC,UAAL,CAAgBzC,MAAM,CAACwC,SAAvB,EAAkC,KAAlC,EAAyC/Y,SAAzC;AACA;AACD;AACD,aARD,CAVM,CAAP;AAoBA;;;iBAGD,uBAAcqZ,SAAd,EAA+B;AAAA;;AAC9B,mBAAO,KAAKG,cAAL,CAAoBH,SAApB,EAA+BnW,IAA/B,CACN,qDAAI,gBAAM,EAAG;AACZ,kBAAIqT,MAAJ,EAAY;AACX,oBAAI,CAACA,MAAM,CAACgB,OAAZ,EAAqB;AACpB,oEAAWhB,MAAM,CAACiB,MAAP,GAAgBC,IAAI,CAACC,SAAL,CAAenB,MAAM,CAACiB,MAAtB,CAAhB,GAAgD,gBAA3D;AACA;;AAED,uBAAOjB,MAAM,CAACoB,OAAd;AACA;AACD,aARD,CADM,EAUN,qDAAI,gBAAM,EAAG;AACZ,kBAAIpB,MAAJ,EAAY;AACX,uBAAI,CAACc,gBAAL,CAAsB,OAAI,CAACvZ,QAA3B,EAAqCyY,MAAM,CAACuB,GAA5C,EAAiD9W,SAAjD;;AACA,uBAAI,CAACgY,UAAL,CAAgBzC,MAAM,CAAC4C,WAAvB,EAAoC,KAApC,EAA2CnZ,SAA3C;AACA;AACD,aALD,CAVM,CAAP;AAiBA;;;iBAEO,0BAAoByZ,UAApB,EAA+CC,GAA/C,EAA4Dja,KAA5D,EAAoG;AAAA,gBAA9Bka,aAA8B,uEAAL,KAAK;AAC3G,gBAAIC,WAAW,GAAGF,GAAG,GAAGD,UAAU,CAACC,GAAD,CAAb,GAAqB1Y,SAA1C;;AACA,gBAAI4Y,WAAJ,EAAiB;AAChB,kBAAID,aAAa,IAAI,CAACla,KAAtB,EAA6B;AAC5B,uBAAOma,WAAP;AACA;;AAEDA,yBAAW,CAACtB,eAAZ,CAA4BC,IAA5B,CAAiC9Y,KAAjC;AACA,aAND,MAMO;AACN,kBAAM6Y,eAAe,GAAG,IAAIuB,iDAAJ,CAAuBpa,KAAvB,CAAxB;AACAma,yBAAW,GAAG;AACbtB,+BAAe,EAAEA,eADJ;AAEbL,2BAAW,EAAEK,eAAe,CAACwB,YAAhB;AAFA,eAAd;AAKAL,wBAAU,CAACC,GAAD,CAAV,GAAkBE,WAAlB;AACA;;AACD,mBAAOA,WAAP;AACA;;;;;;;yBA/QoB9C,iBAAciD;AAAA;;;eAAdjD;AAAcrR,iBAAdqR,eAAc;AAAAnR,oBAFvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCzCAqU;AAIX;AAAA;AACC;;;;iBAED,oBAAQ,CACP;;;;;;;yBARUA;AAAsB;;;cAAtBA;AAAsB5T;AAAAC;AAAA4T;AAAA;AAAAxL;AAAAC;AAAAC;AAAAC;AAAAhE;AAAA;;;ACRnC+B;;AACCA;;AACAA;;AACCA;;AACCA;;AAAIA;;AAASA;;AACbA;;AACDA;;AACDA;;AACAA;;AACDA;;;;AALOA;;AAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCSMuN;;;;;yBAAAA;AAAmB;;;cAAnBA;;;kBALF,CACPC,yDADO;;;;4HAKED,sBAAmB;AAAAzN,yBANf2N,6EAMe;AANO5N,oBAEnC2N,yDAFmC,CAMP;AAJhBzN,oBAEJ0N,6EAFI;AAIgB;AAFE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACH/BzN;;AAA8BA;;AAAcA;;;;;;AAAdA;;AAAAA;;;;;;AAD/BA;;AACCA;;AACAA;;AACCA;;AACDA;;AACDA;;;;;;AAJaA;;AAAAA;;AAEXA;;AAAAA;;;;;;AAKDA;;AAA8BA;;AAAcA;;;;;;AAAdA;;AAAAA;;;;;;;;AAD/BA;;AACCA;;AACAA;;AAA6DA;AAAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAC5DA;;AACDA;;AACDA;;;;;;AAJaA;;AAAAA;;AACEA;;AAAAA;;AACbA;;AAAAA;;;;;;AAKDA;;AAA8BA;;AAAcA;;;;;;AAAdA;;AAAAA;;;;;;AAE7BA;;AACCA;;AACDA;;;;;;;;AAF8CA;;AAAgBA;;AAC7DA;;AAAAA;;;;;;;;AAJHA;;AACCA;;AACAA;;AAAYA;AAAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACXA;;AAGDA;;AACDA;;;;;;AANaA;;AAAAA;;AAEmBA;;AAAAA;;;;;;AAO/BA;;AAA8BA;;AAAcA;;;;;;AAAdA;;AAAAA;;;;;;;;AAM7BA;;AAICA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEAA;;AACAA;;AAAwBA;;AAAMA;;AAC/BA;;;;;;AANCA,uFAAmB,WAAnB,EAAmB,IAAnB;;AAIAA;;AAAAA;;;;;;;;AAbHA;;AACCA;;AACAA;;AAGCA;AAAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEAA;;AASAA;;AAKCA;AAAAA;;AAAA;;AAAA;;AAAA;AAAA;;AALDA;;AAMDA;;AACDA;;;;;;;;;;AAtBaA;;AAAAA;;AAMiBA;;AAAAA;;AAU3BA;;AAAAA,iHAA0C,aAA1C,EAA0C0N,oBAA1C,EAA0C,iBAA1C,EAA0CC,IAA1C,EAA0C,+BAA1C,EAA0CC,yBAA1C;;;;;;AASF5N;;AAA8BA;;AAAcA;;;;;;AAAdA;;AAAAA;;;;;;AAD/BA;;AACCA;;AACAA;;AAMAA;;AAAAA;;AACDA;;;;;;AARaA;;AAAAA;;AAEXA;;AAAAA,8GAAuC,MAAvC,EAAuC0N,4BAAvC,EAAuC,OAAvC,EAAuCA,oBAAvC,EAAuC,IAAvC,EAAuC,uBAAvC,EAAuC,UAAvC,EAAuCA,gCAAvC;;;;;;AASD1N;;AAA8BA;;AAAcA;;;;;;AAAdA;;AAAAA;;;;;;AAD/BA;;AACCA;;AACAA;;AAMDA;;;;;;AAPaA;;AAAAA;;AAEZA;;AAAAA,8GAAuC,MAAvC,EAAuC0N,4BAAvC,EAAuC,OAAvC,EAAuCA,oBAAvC,EAAuC,IAAvC,EAAuC,uBAAvC,EAAuC,UAAvC,EAAuCA,gCAAvC;;;;;;;;AAnEF1N;;AAECA;AAAA;;AAAA;AAAA,yCAA4B0N,oCAA5B;AAA0D,WAA1D;;AAGA1N;;AAOAA;;AAOAA;;AASAA;;AAyBAA;;AAWAA;;AASDA;;;;;;AAtECA;;AAFAA;;AAIMA;;AAAAA;;AAOAA;;AAAAA;;AAOWA;;AAAAA;;AASAA;;AAAAA;;AAyBAA;;AAAAA;;;;;;AAsBnBA;;AAAmCA;;AAASA;;;;;;AAATA;;AAAAA;;;;;;;;AAElCA;;AAAuCA;AAAAA;;AAAA;;AAAA;AAAA;;AAAwBA;;AAAmBA;;;;;;AAAnBA;;AAAAA;;;;ACxEhE,UAAY6N,YAAZ;;AAAA,iBAAYA,WAAZ,EAAuB;AACrBA;AACAA;AACAA;AACAA;AACAA;AACAA;AACD,OAPD,EAAYA,YAAW,KAAXA,YAAW,MAAvB;;UA+BaC;AAYX;AAAA;;AAVA,uBAAgB,EAAhB;AACA,wBAAmB,EAAnB;AAIA,4BAAqB,QAArB;AAGA,oCAA+B,CAAEC,wDAAF,EAASA,wDAAT,CAA/B;AAEiB;;;;iBAET,oBAAWC,KAAX,EAA0B1b,KAA1B,EAAuC;AAC7C0b,iBAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeD,KAAf,EAAsB1b,KAAtB,CAAlB;AACD;;;iBAED,iBAAQ0b,KAAR,EAAuB1b,KAAvB,EAA+C;AAC7C,gBAAM+V,KAAK,GAAG/V,KAAK,CAAC+V,KAApB;AACA,gBAAMvV,KAAK,GAAGR,KAAK,CAACQ,KAApB;;AAEA,gBAAI,CAACA,KAAK,IAAI,EAAV,EAAcob,IAAd,EAAJ,EAA0B;AACxB,kBAAI,CAACF,KAAK,CAAClb,KAAX,EAAkB;AAChBkb,qBAAK,CAAClb,KAAN,GAAc,CAAEA,KAAK,CAACob,IAAN,EAAF,CAAd;AACD,eAFD,MAEO,IAAIF,KAAK,CAAClb,KAAN,YAAuBiZ,KAA3B,EAAkC;AACvCiC,qBAAK,CAAClb,KAAN,CAAYuY,IAAZ,CAAiBvY,KAAK,CAACob,IAAN,EAAjB;AACD,eAFM,MAEA;AACLF,qBAAK,CAAClb,KAAN,GAAc,CAAEkb,KAAK,CAAClb,KAAR,EAAyBA,KAAK,CAACob,IAAN,EAAzB,CAAd;AACD;AACF;;AAED,gBAAI7F,KAAJ,EAAW;AACTA,mBAAK,CAACvV,KAAN,GAAc,EAAd;AACD;;AACD,iBAAKqb,UAAL,CAAgBH,KAAhB,EAAuB,SAAvB;AACD;;;iBAED,oBAAWA,KAAX,EAA0Blb,KAA1B,EAAuC;AACrC,gBAAI,CAACkb,KAAK,CAAClb,KAAX,EAAkB;AAChB;AACD,aAFD,MAEO,IAAI,EAAEkb,KAAK,CAAClb,KAAN,YAAuBiZ,KAAzB,CAAJ,EAAqC;AAC1CiC,mBAAK,CAAClb,KAAN,GAAc,EAAd;AACA;AACD;;AAED,gBAAMwR,KAAK,GAAG0J,KAAK,CAAClb,KAAN,CAAYsb,OAAZ,CAAoBtb,KAApB,CAAd;;AACA,gBAAIwR,KAAK,IAAI,CAAb,EAAgB;AACd0J,mBAAK,CAAClb,KAAN,CAAYub,MAAZ,CAAmB/J,KAAnB,EAA0B,CAA1B;AACD;;AACD,iBAAK6J,UAAL,CAAgBH,KAAhB,EAAuB,YAAvB;AACD;;;iBAED,kBAASA,KAAT,EAAwB1b,KAAxB,EAAoD;AAClD,gBAAI0b,KAAK,CAAClb,KAAN,IAAekb,KAAK,CAAClb,KAAN,YAAuBiZ,KAA1C,EAAiD;AAC/C,uFAAgBiC,KAAK,CAAClb,KAAtB,EAA6BR,KAAK,CAACwB,aAAnC,EAAkDxB,KAAK,CAACuB,YAAxD;AACD;;AACD,iBAAKsa,UAAL,CAAgBH,KAAhB,EAAuB,UAAvB;AACD;;;iBAED,qBAAYA,KAAZ,EAA2B1b,KAA3B,EAAmD;AACjD0b,iBAAK,CAAClb,KAAN,GAAcR,KAAK,CAACgc,OAApB;AACA,iBAAKH,UAAL,CAAgBH,KAAhB,EAAuB,aAAvB;AACD;;;iBAED,qBAAYA,KAAZ,EAA2B1b,KAA3B,EAAiD;AAC/C,gBAAI,CAAC0b,KAAK,CAACO,IAAX,EAAiB;AACfP,mBAAK,CAACO,IAAN,GAAa,EAAb;AACD;;AACDP,iBAAK,CAACO,IAAN,CAAW,UAAX,IAAyBjc,KAAK,CAACQ,KAA/B;AACA,iBAAKqb,UAAL,CAAgBH,KAAhB,EAAuB,aAAvB;AACD;;;iBAED,kBAASjS,EAAT,EAAmB;AACjB,gBAAMyS,KAAK,GAAG,KAAKC,MAAL,CAAY9Q,MAAZ,CAAmB,eAAK;AAAA,qBAAIqQ,KAAK,CAACjS,EAAN,IAAYA,EAAhB;AAAA,aAAxB,CAAd;AACA,mBAAOyS,KAAK,CAACtD,MAAN,GAAe,CAAf,GAAmBsD,KAAK,CAAC,CAAD,CAAxB,GAA8Bna,SAArC;AACD;;;iBAED,kBAAS0H,EAAT,EAAmB;AACjB,gBAAM7I,OAAO,GAAGwb,QAAQ,CAACC,cAAT,kBAAkC5S,EAAlC,EAAhB;AACA,mBAAO7I,OAAO,GAAIwb,QAAQ,CAACC,cAAT,kBAAkC5S,EAAlC,GAA6DjJ,KAAjE,GAAyEuB,SAAvF;AACD;;;iBAED,uBAAc0H,EAAd,EAAwB;AACtB,gBAAMiS,KAAK,GAAG,KAAKY,QAAL,CAAc7S,EAAd,CAAd;;AACA,gBAAIiS,KAAK,IAAIA,KAAK,CAACa,KAAf,IAAwBb,KAAK,CAACa,KAAN,IAAehB,YAAW,CAACiB,IAAvD,EAA6D;AAC3D,qBAAOd,KAAK,CAAClb,KAAN,YAAuBiZ,KAAvB,GAA+BiC,KAAK,CAAClb,KAArC,GAA6C,CAAEkb,KAAK,CAAClb,KAAR,CAApD;AACD;;AACD,mBAAOuB,SAAP;AACD;;;iBAED,yBAAgB0H,EAAhB,EAA0B;AACxB,gBAAMiS,KAAK,GAAG,KAAKY,QAAL,CAAc7S,EAAd,CAAd;;AACA,gBAAIiS,KAAK,IAAIA,KAAK,CAACa,KAAf,IAAwBb,KAAK,CAACa,KAAN,IAAehB,YAAW,CAACkB,QAAvD,EAAiE;AAC/D,qBAAOf,KAAK,CAAClb,KAAN,IAAe,IAAf,GAAsBkb,KAAK,CAAClb,KAA5B,GAAoC,KAA3C;AACD;;AACD,mBAAO,KAAP;AACD;;;iBAED,0BAAiBiJ,EAAjB,EAA2B;AACzB,gBAAMiS,KAAK,GAAG,KAAKY,QAAL,CAAc7S,EAAd,CAAd;;AACA,gBAAIiS,KAAK,IAAIA,KAAK,CAACa,KAAf,IAAwBb,KAAK,CAACa,KAAN,IAAehB,YAAW,CAACmB,MAAvD,EAA+D;AAC7D,qBAAOhB,KAAK,CAACO,IAAN,GAAaP,KAAK,CAACO,IAAN,CAAW,UAAX,CAAb,GAAsCla,SAA7C;AACD;;AACD,mBAAOA,SAAP;AACD;;;;;;;yBAzGUyZ;AAAmB;;;cAAnBA;AAAmBrU;AAAAsI;AAAAC;AAAAC;AAAAhE;AAAA;ADtChC+B;;AAAqBA;;AAASA;;AAC9BA;;AACCA;;AA0EDA;;AACAA;;AACAA;;AACCA;;AACAA;;AAAkDA;;AAAKA;;AACxDA;;;;AAjFqBA;;AAAAA;;AAEGA;;AAAAA;;AA2EFA;;AAAAA;;AAEDA;;AAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UEhDRiP;;;;;yBAAAA;AAAgB;;;cAAhBA;;;kBAfF,CACPzB,yDADO,EAEP0B,qEAFO,EAGPC,4EAHO,EAIPC,mEAJO,EAKPC,qEALO,EAMPC,mEANO,EAOPC,iEAPO,EAQPC,iFARO,EASPC,0EATO,EAUPC,sEAVO,EAWPC,mEAXO;;;;4HAeEV,mBAAgB;AAAAnP,yBAhBZ8P,uEAgBY;AAhBO/P,oBAEhC2N,yDAFgC,EAGhC0B,qEAHgC,EAIhCC,4EAJgC,EAKhCC,mEALgC,EAMhCC,qEANgC,EAOhCC,mEAPgC,EAQhCC,iEARgC,EAShCC,iFATgC,EAUhCC,0EAVgC,EAWhCC,sEAXgC,EAYhCC,mEAZgC,CAgBP;AAJX5P,oBAEN6P,uEAFM;AAIW;AAFE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3B9B5P;;AAAmDA;AAAA;;AAAA;AAAA,yCAA4B0N,oCAA5B;AAA0D,WAA1D;;AAA4D1N;;AAAcA;;;;;;AAAdA;;AAAAA;;;;UCWnG6P;;;;;;;iBAMX,kBAASvd,KAAT,EAA0B;AACxB,gBAAMwd,cAAc,GAAI,KAAKC,kBAAL,CAAgCC,QAAhC,CAAyCC,aAAjE;AACAH,0BAAc,CAACtY,KAAf,CAAqB0Y,WAArB,CAAiC,MAAjC,YAA4C5d,KAAK,CAAC6d,OAAlD;AACAL,0BAAc,CAACtY,KAAf,CAAqB0Y,WAArB,CAAiC,KAAjC,YAA2C5d,KAAK,CAAC8d,OAAjD;AACAN,0BAAc,CAACtY,KAAf,CAAqB0Y,WAArB,CAAiC,UAAjC,EAA6C,OAA7C;AACAJ,0BAAc,CAACtY,KAAf,CAAqB0Y,WAArB,CAAiC,YAAjC,EAA+C,QAA/C;AACA,iBAAKH,kBAAL,CAAwBM,IAAxB,CAA6BC,cAA7B,CAA4C,OAA5C;AACA,iBAAKP,kBAAL,CAAwBQ,QAAxB;AACD;;;;;;;yBAdUV;AAAkB;;;cAAlBA;AAAkBpW;AAAAsH;AAAA;sEAIlByP,oEAAc;;;;;;;;;;;;;;;;;ADjB3BxQ;;AACAA;;AACCA;;AACDA;;;;;;AAH0CA;;AAEDA;;AAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UEa5ByQ;;;;;yBAAAA;AAAe;;;cAAfA;;;kBANF,CACPjD,yDADO,EAEPkD,iEAFO;;;;4HAMED,kBAAe;AAAA3Q,yBAPX6Q,qEAOW;AAPO9Q,oBAE/B2N,yDAF+B,EAG/BkD,iEAH+B,CAOP;AAJX3Q,oBAEL4Q,qEAFK;AAIW;AAFE;;;;","names":["dest","extendStyles","touchAction","webkitUserDrag","webkitTapHighlightColor","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","styles","parseCssTimeUnitsToMs","top","right","bottom","left","width","height","clientRect","rect","pointerX","ParentPositionTracker","scrollPosition","elements","newTop","newLeft","adjustClientRect","clone","i","descendantsWithId","transferCanvasData","transferInputData","transferData","callback","cloneUniqueId","context","passive","DragRef","x","y","rxjs__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","event","activeTransform","constrainedPointerPosition","source","pointerPosition","distance","delta","_dragDropRegistry","value","handle","disabledHandles","rootElement","element","boundaryElement","change","subscribe","removeNode","toggleNativeDragInteractions","dropPoint","parent","toggleVisibility","dropContainer","item","currentIndex","previousIndex","container","previousContainer","isPointerOverContainer","rawX","rawY","newContainer","undefined","viewRef","preview","matchElementSize","getTransform","pointerEvents","margin","position","zIndex","previewClass","resolve","clearTimeout","placeholder","pageX","pageY","svgPoint","pickupX","pickupY","pointerPositionOnPage","positionSinceLastChange","elementRect","target","documentRef","previewContainer","Math","node","rootNodes","sourceRect","array","targetArray","DropListRef","drag","overlaps","rxjs__WEBPACK_IMPORTED_MODULE_5__","pipe","incrementVerticalScroll","incrementHorizontalScroll","newIndex","newPositionReference","activeDraggables","reference","appendChild","items","moveItemInArray","siblings","sibling","elementToOffset","getElementScrollDirections","verticalScrollDirection","horizontalScrollDirection","scrollNode","style","offset","initialTransform","sort","a","find","_a","siblingOffset","newPosition","itemOffset","_","direction","pointerY","activeSiblings","capture","DragDropRegistry","set","isTouchEvent","handler","options","_angular_core__WEBPACK_IMPORTED_MODULE_7__","_angular_common__WEBPACK_IMPORTED_MODULE_8__","factory","token","providedIn","type","decorators","args","dragStartThreshold","pointerDirectionChangeThreshold","DragDrop","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__","CdkDropListGroup","selectors","inputs","disabled","exportAs","features","provide","useExisting","selector","providers","name","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","config","_uniqueIdCounter","assertElementNode","ref","map","console","drop","getAncestorScrollContainers","connectedTo","withOrientation","lockAxis","draggingDisabled","sortingDisabled","listAutoScrollDisabled","listOrientation","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__","CDK_DROP_LIST_GROUP","CDK_DRAG_CONFIG","hostAttrs","hostVars","hostBindings","ctx","id","enterPredicate","sortPredicate","autoScrollDisabled","orientation","data","autoScrollStep","outputs","dropped","entered","exited","sorted","useValue","host","CdkDragHandle","CDK_DRAG_PARENT","CdkDragPlaceholder","CdkDragPreview","matchSize","CdkDrag","_document","_ngZone","_viewContainerRef","_selfHandle","_parentDrag","rxjs__WEBPACK_IMPORTED_MODULE_12__","observer","subscription","filter","childHandleElements","handles","handleInstance","getClosestMatchingAncestor","boundary","template","viewContainer","dragStartDelay","withBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withPreviewContainer","_b","constrainPosition","rootElementSelector","CDK_DROP_LIST","CDK_DRAG_HANDLE","contentQueries","dirIndex","CDK_DRAG_PREVIEW","CDK_DRAG_PLACEHOLDER","_t","freeDragPosition","started","released","ended","moved","_handles","descendants","_previewTemplate","_placeholderTemplate","currentElement","DragDropModule","imports","declarations","exports","_angular_core__WEBPACK_IMPORTED_MODULE_0__","ctx_r0","MatAutocompleteSelectedEvent","option","MatAutocompleteBase","autoActiveFirstOption","_MatAutocompleteBase","_uniqueAutocompleteIdCounter","reduce","classList","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__","withWrap","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__","viewQuery","_c0","displayWith","ariaLabel","ariaLabelledby","panelWidth","optionSelected","opened","closed","optionActivated","panel","MatAutocomplete","t","_angular_material_core__WEBPACK_IMPORTED_MODULE_1__","disableRipple","ngContentSelectors","decls","vars","consts","MatAutocomplete_ng_template_0_Template","directives","_angular_common__WEBPACK_IMPORTED_MODULE_6__","encapsulation","changeDetection","optionGroups","_MatAutocompleteOriginBase","elementRef","MatAutocompleteOrigin","deps","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__","useFactory","_angular_forms__WEBPACK_IMPORTED_MODULE_8__","multi","_MatAutocompleteTriggerBase","rxjs__WEBPACK_IMPORTED_MODULE_9__","window","Promise","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_18__","keyCode","firstStable","optionChanges","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_21__","overlayRef","positionStrategy","scrollStrategy","panelClass","flexibleConnectedTo","withFlexibleDimensions","withPush","originX","originY","overlayX","overlayY","positions","autocomplete","index","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_22__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_23__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_24__","autocompleteAttribute","autocompleteDisabled","MatAutocompleteTrigger","MatAutocompleteModule","MatChipSelectionChange","selected","MatChipBase","MatChipAvatar","MatChipTrailingIcon","MatChip","platform","chip","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__","isUserInput","_MatChipMixinBase","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__","_angular_common__WEBPACK_IMPORTED_MODULE_7__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_8__","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MAT_CHIP_REMOVE","color","tabIndex","selectable","removable","selectionChange","destroyed","removed","avatar","trailingIcon","removeIcon","MatChipRemove","parentChip","MatChipListBase","ngControl","MatChipListChange","MatChipList","nextUniqueId$1","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_13__","valueToEmit","setTimeout","_MatChipListMixinBase","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_14__","_angular_forms__WEBPACK_IMPORTED_MODULE_15__","ariaOrientation","multiple","compareWith","required","errorStateMatcher","valueChange","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_16__","chips","MatChipInput","nextUniqueId","input","chipInput","MAT_CHIPS_DEFAULT_OPTIONS","separatorKeyCodes","chipList","addOnBlur","chipEnd","MatChipsModule","period","scheduler","_scheduler_async__WEBPACK_IMPORTED_MODULE_0__","_Observable__WEBPACK_IMPORTED_MODULE_2__","subscriber","counter","state","observables","lift","ZipOperator","ZipSubscriber","iterators","_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_3__","destination","shouldComplete","result","_Subscriber__WEBPACK_IMPORTED_MODULE_1__","StaticIterator","StaticArrayIterator","done","ZipBufferIterator","_innerSubscribe__WEBPACK_IMPORTED_MODULE_4__","ContentService","httpClient","path","pathAsString","join","stored","pathIds","updateStoreValue","_getIdForPath","success","errors","JSON","stringify","content","ids","length","_id","currentPath","push","$observable","useCache","contents","getCategorys","getElements","behaviorSubject","next","categorys","_getCategorys","Array","_getElements","parentId","category","_createCategory","_parentId","getContent","categoryId","_createElement","_categoryId","_updateCategory","elementId","_updateElement","_deleteCategory","_deleteElement","collection","key","skipUndefined","storedValue","rxjs__WEBPACK_IMPORTED_MODULE_4__","asObservable","_angular_core__WEBPACK_IMPORTED_MODULE_5__","ContentHeaderComponent","title","ContentHeaderModule","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_content_header_component__WEBPACK_IMPORTED_MODULE_0__","field_r3","_r29","ctx_r7","IFieldModel","DialogFormComponent","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__","field","onChange","trim","callChange","indexOf","splice","checked","temp","found","fields","document","getElementById","getField","model","CHIP","CHECKBOX","SELECT","DialogFormModule","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__","_angular_material_input__WEBPACK_IMPORTED_MODULE_5__","_angular_material_button__WEBPACK_IMPORTED_MODULE_6__","_angular_material_chips__WEBPACK_IMPORTED_MODULE_7__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_8__","_angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_9__","_angular_material_checkbox__WEBPACK_IMPORTED_MODULE_10__","_angular_material_select__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_12__","_dialog_form_component__WEBPACK_IMPORTED_MODULE_0__","PopupMenuComponent","triggerElement","contextMenuTrigger","_element","nativeElement","setProperty","clientX","clientY","menu","focusFirstItem","openMenu","_angular_material_menu__WEBPACK_IMPORTED_MODULE_1__","PopupMenuModule","_angular_material_menu__WEBPACK_IMPORTED_MODULE_3__","_popup_menu_component__WEBPACK_IMPORTED_MODULE_0__"],"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/interval.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/zip.js","webpack:///src/app/service/content/content.service.ts","webpack:///src/app/shared/content-header/content-header.component.ts","webpack:///src/app/shared/content-header/content-header.component.html","webpack:///src/app/shared/content-header/content-header.module.ts","webpack:///src/app/shared/dialog-form/dialog-form.component.html","webpack:///src/app/shared/dialog-form/dialog-form.component.ts","webpack:///src/app/shared/dialog-form/dialog-form.module.ts","webpack:///src/app/shared/popup-menu/popup-menu.component.html","webpack:///src/app/shared/popup-menu/popup-menu.component.ts","webpack:///src/app/shared/popup-menu/popup-menu.module.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\nfunction toggleVisibility(element, enable) {\n    const styles = element.style;\n    styles.position = enable ? '' : 'fixed';\n    styles.top = styles.opacity = enable ? '' : '0';\n    styles.left = enable ? '' : '-999em';\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform ? (transform + ' ' + initialTransform) : transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        var _a;\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body;\n        }\n        return coerceElement(previewContainer);\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            var _a;\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = (_a = this._itemPositions\n                    .find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({\n                source: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    previewContainer: [{ type: Input, args: ['cdkDragPreviewContainer',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], previewContainer: [{\n            type: Input,\n            args: ['cdkDragPreviewContainer']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n","import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocomplete_BaseFactory; return function MatAutocomplete_Factory(t) { return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete); }; }();\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, directives: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n            }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteOrigin_BaseFactory; return function MatAutocompleteOrigin_Factory(t) { return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin); }; }();\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteTrigger_BaseFactory; return function MatAutocompleteTrigger_Factory(t) { return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger); }; }();\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule\n        ], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n","import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n    /** @docs-private */\n    ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this.inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) { return ctx._keyup($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(keyup)': '_keyup($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [[MatCommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n","import { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function zip(...observables) {\n    const resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport class ZipOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    }\n}\nexport class ZipSubscriber extends Subscriber {\n    constructor(destination, resultSelector, values = Object.create(null)) {\n        super(destination);\n        this.resultSelector = resultSelector;\n        this.iterators = [];\n        this.active = 0;\n        this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;\n    }\n    _next(value) {\n        const iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    }\n    _complete() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        this.unsubscribe();\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                const destination = this.destination;\n                destination.add(iterator.subscribe());\n            }\n            else {\n                this.active--;\n            }\n        }\n    }\n    notifyInactive() {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    }\n    checkIterators() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        const destination = this.destination;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        let shouldComplete = false;\n        const args = [];\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            let result = iterator.next();\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    }\n    _tryresultSelector(args) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\nclass StaticIterator {\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    hasValue() {\n        return true;\n    }\n    next() {\n        const result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    }\n    hasCompleted() {\n        const nextResult = this.nextResult;\n        return Boolean(nextResult && nextResult.done);\n    }\n}\nclass StaticArrayIterator {\n    constructor(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next(value) {\n        const i = this.index++;\n        const array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    }\n    hasValue() {\n        return this.array.length > this.index;\n    }\n    hasCompleted() {\n        return this.array.length === this.index;\n    }\n}\nclass ZipBufferIterator extends SimpleOuterSubscriber {\n    constructor(destination, parent, observable) {\n        super(destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next() {\n        const buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    }\n    hasValue() {\n        return this.buffer.length > 0;\n    }\n    hasCompleted() {\n        return this.buffer.length === 0 && this.isComplete;\n    }\n    notifyComplete() {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    notifyNext(innerValue) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    }\n    subscribe() {\n        return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, throwError, zip } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nexport interface IElement {\n\t_id?: string;\n\t_categoryId?: string;\n\tenabled?: boolean;\n}\n\nexport interface ICategory {\n\t_id?: string;\n\t_parentId?: string;\n\tenabled?: boolean;\n}\n\nexport interface IContent<Cateogry extends ICategory, Element extends IElement> {\n\tcategorys: Cateogry[];\n\telements: Element[];\n}\n\ninterface SearchOptions {\n\t_id?: string;\n}\n\nexport interface SearchCategoryOptions extends SearchOptions {\n\t_parentId?: string;\n}\n\nexport interface SearchElementOptions extends SearchOptions {\n\t_categoryId?: string;\n}\n\ninterface StoreValue<T> {\n\t[value: string]: {\n\t\tbehaviorSubject: BehaviorSubject<T>,\n\t\t$observable: Observable<T>\n\t}\n}\n\nexport interface Response {\n\tsuccess: boolean;\n\terrors: { msg: string }[];\n\n\tcontent: any;\n}\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport abstract class ContentService<Category extends ICategory, Element extends IElement> {\n\n\tprivate categorys: StoreValue<Category> = {};\n\tprivate elements: StoreValue<Element> = {};\n\n\tprivate pathIds: StoreValue<{ id: string, element: Element }> = {};\n\tprivate contents: StoreValue<IContent<Category, Element>> = {};\n\n\tconstructor(\n\t\tprotected readonly httpClient: HttpClient\n\t) { }\n\n\tabstract _getIdForPath(path: string[]): Observable<Response>;\n\tgetIdForPath(path: string[]): Observable<{ id: string, element: Element }> {\n\t\tconst pathAsString = path.join('/');\n\t\tlet stored = this.pathIds[pathAsString];\n\t\tif (!stored) {\n\t\t\tstored = this.updateStoreValue(this.pathIds, pathAsString, undefined);\n\n\t\t\tthis._getIdForPath(path).pipe(\n\t\t\t\tmap(result => {\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn result.content && result.content.ids ? result : undefined;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttap(result => {\n\t\t\t\t\tif (result && result.content.ids.length <= path.length) {\n\t\t\t\t\t\tconst ids: string[] = result.content.ids;\n\t\t\t\t\t\tconst element: Element = result.content.element;\n\t\t\t\t\t\tif (element) {\n\t\t\t\t\t\t\tthis.updateStoreValue(this.elements, element._id, element, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst currentPath: string[] = [];\n\t\t\t\t\t\tfor (let index = 0; index < path.length; index++) {\n\t\t\t\t\t\t\tcurrentPath.push(path[index]);\n\t\t\t\t\t\t\tthis.updateStoreValue(this.pathIds, currentPath.join('/'), {\n\t\t\t\t\t\t\t\tid: ids[index],\n\t\t\t\t\t\t\t\telement: (index == (path.length - 1) && element ? element : undefined)\n\t\t\t\t\t\t\t}, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})).subscribe();\n\t\t}\n\t\treturn stored.$observable;\n\t}\n\n\tgetContent(_id: string, useCache: boolean = true): Observable<IContent<Category, Element>> {\n\t\tlet stored = this.contents[_id];\n\t\tif (!stored) {\n\t\t\tstored = this.updateStoreValue(this.contents, _id, undefined, true);\n\t\t\tuseCache = false;\n\t\t}\n\n\t\tif (!useCache) {\n\t\t\tzip(this.getCategorys({ _id }), this.getElements({ _id }))\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(result => {\n\t\t\t\t\t\tif (result && result.length > 1 && (result[0] || result[1])) {\n\t\t\t\t\t\t\tstored.behaviorSubject.next({\n\t\t\t\t\t\t\t\tcategorys: result[0],\n\t\t\t\t\t\t\t\telements: result[1]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\t\treturn stored.$observable;\n\t}\n\n\tabstract _getCategorys(options: SearchCategoryOptions): Observable<Response>;\n\tgetCategorys(options: SearchCategoryOptions): Observable<Category[]> {\n\t\treturn this._getCategorys(options).pipe(\n\t\t\tmap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.content instanceof Array ? result.content as Category[] : undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tfor (const content of result) {\n\t\t\t\t\t\tthis.updateStoreValue(this.categorys, content._id, content);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tabstract _getElements(options: SearchElementOptions): Observable<Response>;\n\tgetElements(options: SearchElementOptions): Observable<Element[]> {\n\t\treturn this._getElements(options).pipe(\n\t\t\tmap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.content instanceof Array ? result.content as Element[] : undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tfor (const content of result) {\n\t\t\t\t\t\tthis.updateStoreValue(this.elements, content._id, content);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tabstract _createCategory(parentId: string, category: Category): Observable<Response>;\n\tcreateCategory(parentId: string, category: Category): Observable<Category> {\n\t\treturn this._createCategory(parentId, category).pipe(\n\t\t\tmap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.content;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.updateStoreValue(this.categorys, result._id, result);\n\n\t\t\t\t\tif (result._parentId) {\n\t\t\t\t\t\tthis.getContent(result._parentId, false).subscribe();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tabstract _createElement(categoryId: string, element: Element): Observable<Response>;\n\tcreateElement(categoryId: string, element: Element) {\n\t\treturn this._createElement(categoryId, element).pipe(\n\t\t\tmap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.content;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.updateStoreValue(this.elements, result._id, result);\n\t\t\t\t\tthis.getContent(result._categoryId, false).subscribe();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tabstract _updateCategory(categoryId: string, category: Category): Observable<Response>;\n\tupdateCategory(categoryId: string, category: Category) {\n\t\treturn this._updateCategory(categoryId, category).pipe(\n\t\t\tmap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.content;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.updateStoreValue(this.categorys, result._id, result);\n\t\t\t\t\tif (result._parentId) {\n\t\t\t\t\t\tthis.getContent(result._parentId, false).subscribe();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tabstract _updateElement(elementId: string, element: Element): Observable<Response>;\n\tupdateElement(elementId: string, element: Element) {\n\t\treturn this._updateElement(elementId, element).pipe(\n\t\t\tmap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.content;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.updateStoreValue(this.elements, result._id, result);\n\t\t\t\t\tthis.getContent(result._categoryId, false).subscribe();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tabstract _deleteCategory(categoryId: string): Observable<Response>;\n\tdeleteCategory(categoryId: string) {\n\t\treturn this._deleteCategory(categoryId).pipe(\n\t\t\tmap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.content;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.updateStoreValue(this.categorys, result._id, undefined);\n\n\t\t\t\t\tif (result._parentId) {\n\t\t\t\t\t\tthis.getContent(result._parentId, false).subscribe();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tabstract _deleteElement(elementId: string): Observable<Response>;\n\tdeleteElement(elementId: string) {\n\t\treturn this._deleteElement(elementId).pipe(\n\t\t\tmap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\tthrowError(result.errors ? JSON.stringify(result.errors) : 'Unknown error!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result.content;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttap(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.updateStoreValue(this.elements, result._id, undefined);\n\t\t\t\t\tthis.getContent(result._categoryId, false).subscribe();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate updateStoreValue<T>(collection: StoreValue<T>, key: string, value: T, skipUndefined: boolean = false) {\n\t\tlet storedValue = key ? collection[key] : undefined;\n\t\tif (storedValue) {\n\t\t\tif (skipUndefined && !value) {\n\t\t\t\treturn storedValue;\n\t\t\t}\n\n\t\t\tstoredValue.behaviorSubject.next(value);\n\t\t} else {\n\t\t\tconst behaviorSubject = new BehaviorSubject<T>(value);\n\t\t\tstoredValue = {\n\t\t\t\tbehaviorSubject: behaviorSubject,\n\t\t\t\t$observable: behaviorSubject.asObservable()\n\t\t\t}\n\n\t\t\tcollection[key] = storedValue;\n\t\t}\n\t\treturn storedValue;\n\t}\n}","import { Component, ContentChild, ElementRef, Input, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { ChildrenOutletContexts } from '@angular/router';\n\n@Component({\n  selector: 'app-content-header',\n  templateUrl: './content-header.component.html',\n  styleUrls: ['./content-header.component.css']\n})\nexport class ContentHeaderComponent implements OnInit {\n\n  @Input() title: string;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"header\">\n\t<div class=\"header-start\"></div>\n\t<div class=\"header-main\">\n\t\t<div class=\"header-main-content\">\n\t\t\t<h1>{{title}}</h1>\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t</div>\n\t<div class=\"header-end\"></div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContentHeaderComponent } from './content-header.component';\n\n\n\n@NgModule({\n  declarations: [ContentHeaderComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [ContentHeaderComponent]\n})\nexport class ContentHeaderModule { }\n","<h1 mat-dialog-title>{{title}}</h1>\n<div mat-dialog-content class=\"content\">\n\t<div *ngFor=\"let field of fields\"\n\t\t[ngSwitch]=\"field.model\"\n\t\t(click)=\"field.leftClick && field.leftClick($event, field)\"\n\t\t[style]=\"field.style\"\n\t\tclass=\"content-item\">\n\t\t<div *ngSwitchCase=\"'button'\">\n\t\t\t<mat-label *ngIf=\"field.name\">{{field.name}}</mat-label>\n\t\t\t<button mat-stroked-button color=\"primary\">\n\t\t\t\t{{field.placeholder || field.name}}\n\t\t\t</button>\n\t\t</div>\n\n\t\t<div *ngSwitchCase=\"'checkbox'\">\n\t\t\t<mat-label *ngIf=\"field.name\">{{field.name}}</mat-label>\n\t\t\t<mat-checkbox [checked]=\"field.value && field.value == true\" (change)=\"toggleValue(field, $event)\">\n\t\t\t\t{{field.placeholder || field.name}}\n\t\t\t</mat-checkbox>\n\t\t</div>\n\n\t\t<mat-form-field *ngSwitchCase=\"'select'\">\n\t\t\t<mat-label *ngIf=\"field.name\">{{field.name}}</mat-label>\n\t\t\t<mat-select (selectionChange)=\"selectValue(field, $event)\">\n\t\t\t\t<mat-option *ngFor=\"let value of field.value\" [value]=\"value\" [attr.selected]=\"field.placeholder == value\">\n\t\t\t\t\t{{value}}\n\t\t\t\t</mat-option>\n\t\t\t</mat-select>\n\t\t</mat-form-field>\n\n\t\t<mat-form-field *ngSwitchCase=\"'chip'\">\n\t\t\t<mat-label *ngIf=\"field.name\">{{field.name}}</mat-label>\n\t\t\t<mat-chip-list #chipList\n\t\t\t\tcdkDropList\n\t\t\t\tcdkDropListOrientation=\"horizontal\"\n\t\t\t\t(cdkDropListDropped)=\"dropChip(field, $event)\"\n\t\t\t\tclass=\"chip-box\">\n\t\t\t\t<mat-chip *ngFor=\"let value of field.value\"\n\t\t\t\t\tcdkDrag\n\t\t\t\t\t[selectable]=\"true\"\n\t\t\t\t\t[removable]=\"true\"\n\t\t\t\t\t(removed)=\"removeChip(field, value)\"\n\t\t\t\t\tclass=\"chip-item\">\n\t\t\t\t\t{{value}}\n\t\t\t\t\t<mat-icon matChipRemove>cancel</mat-icon>\n\t\t\t\t</mat-chip>\n\t\t\t\t<input matInput\n\t\t\t\t\t[disabled]=\"field.inputType == 'disabled'\"\n\t\t\t\t\t[placeholder]=\"field.placeholder\"\n\t\t\t\t\t[matChipInputFor]=\"chipList\"\n\t\t\t\t\t[matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n\t\t\t\t\t(matChipInputTokenEnd)=\"addChip(field, $event)\">\n\t\t\t</mat-chip-list>\n\t\t</mat-form-field>\n\n\t\t<mat-form-field *ngSwitchCase=\"'textarea'\">\n\t\t\t<mat-label *ngIf=\"field.name\">{{field.name}}</mat-label>\n\t\t\t<textarea matInput\n\t\t\t\t[placeholder]=\"field.placeholder || ''\"\n\t\t\t\t[type]=\"field.inputType || 'text'\"\n\t\t\t\t[value]=\"field.value || ''\"\n\t\t\t\t[id]=\"'dialog-' + field.id\"\n\t\t\t\t[disabled]=\"field.inputType == 'disabled'\">\n\t\t\t</textarea>\n\t\t</mat-form-field>\n\n\t\t<mat-form-field *ngSwitchDefault>\n\t\t\t<mat-label *ngIf=\"field.name\">{{field.name}}</mat-label>\n\t\t\t<input matInput\n\t\t\t[placeholder]=\"field.placeholder || ''\"\n\t\t\t[type]=\"field.inputType || 'text'\"\n\t\t\t[value]=\"field.value || ''\"\n\t\t\t[id]=\"'dialog-' + field.id\"\n\t\t\t[disabled]=\"field.inputType == 'disabled'\">\n\t\t</mat-form-field>\n\t</div>\n</div>\n<h2 mat-dialog-title *ngIf=\"error\">{{error}}</h2>\n<div mat-dialog-actions class=\"buttons\">\n\t<button mat-button *ngIf=\"this.submit\" (click)=\"this.submit()\">{{this.submitName}}</button>\n\t<button mat-button mat-dialog-close class=\"close\">Close</button>\n</div>","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { Component } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MatSelectChange } from '@angular/material/select';\n\nexport enum IFieldModel {\n  INPUT = \"input\",\n  CHIP = \"chip\",\n  CHECKBOX = \"checkbox\",\n  BUTTON = \"button\",\n  SELECT = \"select\",\n  TEXTAREA = \"textarea\"\n}\n\nexport interface IField {\n  id: string;\n  name?: string;\n\n  model?: IFieldModel;\n\n  placeholder?: string;\n  inputType?: 'text' | 'password' | 'disabled';\n  value?: string | string[] | boolean;\n  style?: string;\n\n  leftClick?: (event: MouseEvent, field: IField) => void;\n  onChange?: (field: IField, event: string) => void;\n\n  temp?: { [value: string]: any };\n}\n\n@Component({\n  selector: 'app-dialog-form',\n  templateUrl: './dialog-form.component.html',\n  styleUrls: ['./dialog-form.component.css']\n})\nexport class DialogFormComponent {\n\n  title: string = '';\n  fields: IField[] = [];\n\n  error: string;\n\n  submitName: string = 'Submit';\n  submit: () => any;\n\n  separatorKeysCodes: number[] = [ ENTER, COMMA ];\n\n  constructor() { }\n\n  private callChange(field: IField, event: string) {\n    field.onChange && field.onChange(field, event);\n  }\n\n  addChip(field: IField, event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    if ((value || '').trim()) {\n      if (!field.value) {\n        field.value = [ value.trim() ];\n      } else if (field.value instanceof Array) {\n        field.value.push(value.trim());\n      } else {\n        field.value = [ field.value as string, value.trim() ];\n      }\n    }\n\n    if (input) {\n      input.value = '';\n    }\n    this.callChange(field, 'addChip');\n  }\n\n  removeChip(field: IField, value: string): void {\n    if (!field.value) {\n      return;\n    } else if (!(field.value instanceof Array)) {\n      field.value = [];\n      return;\n    }\n\n    const index = field.value.indexOf(value);\n    if (index >= 0) {\n      field.value.splice(index, 1);\n    }\n    this.callChange(field, 'removeChip');\n  }\n\n  dropChip(field: IField, event: CdkDragDrop<string[]>) {\n    if (field.value && field.value instanceof Array) {\n      moveItemInArray(field.value, event.previousIndex, event.currentIndex);\n    }\n    this.callChange(field, 'dropChip');\n  }\n\n  toggleValue(field: IField, event: MatCheckboxChange) {\n    field.value = event.checked;\n    this.callChange(field, 'toggleValue');\n  }\n\n  selectValue(field: IField, event: MatSelectChange) {\n    if (!field.temp) {\n      field.temp = {};\n    }\n    field.temp['selected'] = event.value;\n    this.callChange(field, 'selectValue');\n  }\n\n  getField(id: string): IField {\n    const found = this.fields.filter(field => field.id == id);\n    return found.length > 0 ? found[0] : undefined;\n  }\n\n  getValue(id: string): string {\n    const element = document.getElementById(`dialog-${id}`);\n    return element ? (document.getElementById(`dialog-${id}`) as HTMLInputElement).value : undefined;\n  }\n\n  getValueArray(id: string): string[] {\n    const field = this.getField(id);\n    if (field && field.model && field.model == IFieldModel.CHIP) {\n      return field.value instanceof Array ? field.value : [ field.value as string ];\n    }\n    return undefined;\n  }\n\n  getValueBoolean(id: string): boolean {\n    const field = this.getField(id);\n    if (field && field.model && field.model == IFieldModel.CHECKBOX) {\n      return field.value == true ? field.value : false;\n    }\n    return false;\n  }\n\n  getValueSelected(id: string): string {\n    const field = this.getField(id);\n    if (field && field.model && field.model == IFieldModel.SELECT) {\n      return field.temp ? field.temp['selected'] : undefined;\n    }\n    return undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DialogFormComponent } from './dialog-form.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatSelectModule } from '@angular/material/select';\n\n@NgModule({\n  declarations: [DialogFormComponent],\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatChipsModule,\n    MatIconModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    DragDropModule\n  ],\n  exports: [DialogFormComponent]\n})\nexport class DialogFormModule { }\n","<div #contextMenuTrigger=\"matMenuTrigger\" [matMenuTriggerFor]=\"contextMenu\"></div>\n<mat-menu #contextMenu>\n\t<button mat-menu-item *ngFor=\"let field of fields\" (click)=\"field.leftClick && field.leftClick($event, field)\">{{field.name}}</button>\n</mat-menu>","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { MatMenu, MatMenuTrigger } from '@angular/material/menu';\n\nexport interface PopupItem {\n  name: string,\n  leftClick?: (event: MouseEvent, field: PopupItem) => void;\n}\n\n@Component({\n  selector: 'app-popup-menu',\n  templateUrl: './popup-menu.component.html',\n  styleUrls: ['./popup-menu.component.css']\n})\nexport class PopupMenuComponent {\n\n  @Input() fields: PopupItem[];\n\n  @ViewChild(MatMenuTrigger) private contextMenuTrigger: MatMenuTrigger;\n\n  openMenu(event: MouseEvent) {\n    const triggerElement = (this.contextMenuTrigger as any)._element.nativeElement;\n    triggerElement.style.setProperty('left', `${event.clientX}px`);\n    triggerElement.style.setProperty('top', `${event.clientY}px`);\n    triggerElement.style.setProperty('position', 'fixed');\n    triggerElement.style.setProperty('visibility', 'hidden');\n    this.contextMenuTrigger.menu.focusFirstItem('mouse');\n    this.contextMenuTrigger.openMenu();\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { PopupMenuComponent } from './popup-menu.component';\n\n\n\n@NgModule({\n  declarations: [PopupMenuComponent],\n  imports: [\n    CommonModule,\n    MatMenuModule\n  ],\n  exports: [PopupMenuComponent]\n})\nexport class PopupMenuModule { }\n"]}